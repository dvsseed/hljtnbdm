{"version":3,"sources":["jquery.ui.timepicker.js"],"names":[],"mappingsfile":"timepicker.js","sourcesContent":["/*\n * jQuery UI Timepicker\n *\n * Copyright 2010-2013, Francois Gelinas\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * http://fgelinas.com/code/timepicker\n *\n * Depends:\n *\tjquery.ui.core.js\n *  jquery.ui.position.js (only if position settings are used)\n *\n * Change version 0.1.0 - moved the t-rex up here\n *\n                                                  ____\n       ___                                      .-~. /_\"-._\n      `-._~-.                                  / /_ \"~o\\  :Y\n          \\  \\                                / : \\~x.  ` ')\n           ]  Y                              /  |  Y< ~-.__j\n          /   !                        _.--~T : l  l<  /.-~\n         /   /                 ____.--~ .   ` l /~\\ \\<|Y\n        /   /             .-~~\"        /| .    ',-~\\ \\L|\n       /   /             /     .^   \\ Y~Y \\.^>/l_   \"--'\n      /   Y           .-\"(  .  l__  j_j l_/ /~_.-~    .\n     Y    l          /    \\  )    ~~~.\" / `/\"~ / \\.__/l_\n     |     \\     _.-\"      ~-{__     l  :  l._Z~-.___.--~\n     |      ~---~           /   ~~\"---\\_  ' __[>\n     l  .                _.^   ___     _>-y~\n      \\  \\     .      .-~   .-~   ~>--\"  /\n       \\  ~---\"            /     ./  _.-'\n        \"-.,_____.,_  _.--~\\     _.-~\n                    ~~     (   _}       -Row\n                           `. ~(\n                             )  \\\n                            /,`--'~\\--'~\\\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                             ->T-Rex<-\n*/\n\n(function ($) {\n\n    $.extend($.ui, { timepicker: { version: \"0.3.3\"} });\n\n    var PROP_NAME = 'timepicker',\n        tpuuid = new Date().getTime();\n\n    /* Time picker manager.\n    Use the singleton instance of this class, $.timepicker, to interact with the time picker.\n    Settings for (groups of) time pickers are maintained in an instance object,\n    allowing multiple different settings on the same page. */\n\n    function Timepicker() {\n        this.debug = true; // Change this to true to start debugging\n        this._curInst = null; // The current instance in use\n        this._disabledInputs = []; // List of time picker inputs that have been disabled\n        this._timepickerShowing = false; // True if the popup picker is showing , false if not\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\n        this._dialogClass = 'ui-timepicker-dialog'; // The name of the dialog marker class\n        this._mainDivId = 'ui-timepicker-div'; // The ID of the main timepicker division\n        this._inlineClass = 'ui-timepicker-inline'; // The name of the inline marker class\n        this._currentClass = 'ui-timepicker-current'; // The name of the current hour / minutes marker class\n        this._dayOverClass = 'ui-timepicker-days-cell-over'; // The name of the day hover marker class\n\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[''] = { // Default regional settings\n            hourText: 'Hour',           // Display text for hours section\n            minuteText: 'Minute',       // Display text for minutes link\n            amPmText: ['AM', 'PM'],     // Display text for AM PM\n            closeButtonText: 'Done',        // Text for the confirmation button (ok button)\n            nowButtonText: 'Now',           // Text for the now button\n            deselectButtonText: 'Deselect'  // Text for the deselect button\n        };\n        this._defaults = { // Global defaults for all the time picker instances\n            showOn: 'focus',    // 'focus' for popup on focus,\n                                // 'button' for trigger button, or 'both' for either (not yet implemented)\n            button: null,                   // 'button' element that will trigger the timepicker\n            showAnim: 'fadeIn',             // Name of jQuery animation for popup\n            showOptions: {},                // Options for enhanced animations\n            appendText: '',                 // Display text following the input box, e.g. showing the format\n\n            beforeShow: null,               // Define a callback function executed before the timepicker is shown\n            onSelect: null,                 // Define a callback function when a hour / minutes is selected\n            onClose: null,                  // Define a callback function when the timepicker is closed\n\n            timeSeparator: ':',             // The character to use to separate hours and minutes.\n            periodSeparator: ' ',           // The character to use to separate the time from the time period.\n            showPeriod: false,              // Define whether or not to show AM/PM with selected time\n            showPeriodLabels: true,         // Show the AM/PM labels on the left of the time picker\n            showLeadingZero: true,          // Define whether or not to show a leading zero for hours < 10. [true/false]\n            showMinutesLeadingZero: true,   // Define whether or not to show a leading zero for minutes < 10.\n            altField: '',                   // Selector for an alternate field to store selected time into\n            defaultTime: 'now',             // Used as default time when input field is empty or for inline timePicker\n                                            // (set to 'now' for the current time, '' for no highlighted time)\n            myPosition: 'left top',         // Position of the dialog relative to the input.\n                                            // see the position utility for more info : http://jqueryui.com/demos/position/\n            atPosition: 'left bottom',      // Position of the input element to match\n                                            // Note : if the position utility is not loaded, the timepicker will attach left top to left bottom\n            //NEW: 2011-02-03\n            onHourShow: null,\t\t\t    // callback for enabling / disabling on selectable hours  ex : function(hour) { return true; }\n            onMinuteShow: null,             // callback for enabling / disabling on time selection  ex : function(hour,minute) { return true; }\n\n            hours: {\n                starts: 0,                  // first displayed hour\n                ends: 23                    // last displayed hour\n            },\n            minutes: {\n                starts: 0,                  // first displayed minute\n                ends: 55,                   // last displayed minute\n                interval: 5,                // interval of displayed minutes\n                manual: []                  // optional extra manual entries for minutes\n            },\n            rows: 4,                        // number of rows for the input tables, minimum 2, makes more sense if you use multiple of 2\n            // 2011-08-05 0.2.4\n            showHours: true,                // display the hours section of the dialog\n            showMinutes: true,              // display the minute section of the dialog\n            optionalMinutes: false,         // optionally parse inputs of whole hours with minutes omitted\n\n            // buttons\n            showCloseButton: false,         // shows an OK button to confirm the edit\n            showNowButton: false,           // Shows the 'now' button\n            showDeselectButton: false,       // Shows the deselect time button\n            \n            maxTime: {\n                hour: null,\n                minute: null\n            },\n            minTime: {\n                hour: null,\n                minute: null\n            }\n\t\t\t\n        };\n        $.extend(this._defaults, this.regional['']);\n\n        this.tpDiv = $('<div id=\"' + this._mainDivId + '\" class=\"ui-timepicker ui-widget ui-helper-clearfix ui-corner-all \" style=\"display: none\"></div>');\n    }\n\n    $.extend(Timepicker.prototype, {\n        /* Class name added to elements to indicate already configured with a time picker. */\n        markerClassName: 'hasTimepicker',\n\n        /* Debug logging (if enabled). */\n        log: function () {\n            if (this.debug)\n                console.log.apply('', arguments);\n        },\n\n        _widgetTimepicker: function () {\n            return this.tpDiv;\n        },\n\n        /* Override the default settings for all instances of the time picker.\n        @param  settings  object - the new settings to use as defaults (anonymous object)\n        @return the manager object */\n        setDefaults: function (settings) {\n            extendRemove(this._defaults, settings || {});\n            return this;\n        },\n\n        /* Attach the time picker to a jQuery selection.\n        @param  target    element - the target input field or division or span\n        @param  settings  object - the new settings to use for this time picker instance (anonymous) */\n        _attachTimepicker: function (target, settings) {\n            // check for settings on the control itself - in namespace 'time:'\n            var inlineSettings = null;\n            for (var attrName in this._defaults) {\n                var attrValue = target.getAttribute('time:' + attrName);\n                if (attrValue) {\n                    inlineSettings = inlineSettings || {};\n                    try {\n                        inlineSettings[attrName] = eval(attrValue);\n                    } catch (err) {\n                        inlineSettings[attrName] = attrValue;\n                    }\n                }\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            var inline = (nodeName == 'div' || nodeName == 'span');\n\n            if (!target.id) {\n                this.uuid += 1;\n                target.id = 'tp' + this.uuid;\n            }\n            var inst = this._newInst($(target), inline);\n            inst.settings = $.extend({}, settings || {}, inlineSettings || {});\n            if (nodeName == 'input') {\n                this._connectTimepicker(target, inst);\n                // init inst.hours and inst.minutes from the input value\n                this._setTimeFromField(inst);\n            } else if (inline) {\n                this._inlineTimepicker(target, inst);\n            }\n\n\n        },\n\n        /* Create a new instance object. */\n        _newInst: function (target, inline) {\n            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\\\\\$1'); // escape jQuery meta chars\n            return {\n                id: id, input: target, // associated target\n                inline: inline, // is timepicker inline or not :\n                tpDiv: (!inline ? this.tpDiv : // presentation div\n                    $('<div class=\"' + this._inlineClass + ' ui-timepicker ui-widget  ui-helper-clearfix\"></div>'))\n            };\n        },\n\n        /* Attach the time picker to an input field. */\n        _connectTimepicker: function (target, inst) {\n            var input = $(target);\n            inst.append = $([]);\n            inst.trigger = $([]);\n            if (input.hasClass(this.markerClassName)) { return; }\n            this._attachments(input, inst);\n            input.addClass(this.markerClassName).\n                keydown(this._doKeyDown).\n                keyup(this._doKeyUp).\n                bind(\"setData.timepicker\", function (event, key, value) {\n                    inst.settings[key] = value;\n                }).\n                bind(\"getData.timepicker\", function (event, key) {\n                    return this._get(inst, key);\n                });\n            $.data(target, PROP_NAME, inst);\n        },\n\n        /* Handle keystrokes. */\n        _doKeyDown: function (event) {\n            var inst = $.timepicker._getInst(event.target);\n            var handled = true;\n            inst._keyEvent = true;\n            if ($.timepicker._timepickerShowing) {\n                switch (event.keyCode) {\n                    case 9: $.timepicker._hideTimepicker();\n                        handled = false;\n                        break; // hide on tab out\n                    case 13:\n                        $.timepicker._updateSelectedValue(inst);\n                        $.timepicker._hideTimepicker();\n\n\t\t\t\t\t\treturn false; // don't submit the form\n\t\t\t\t\t\tbreak; // select the value on enter\n                    case 27: $.timepicker._hideTimepicker();\n                        break; // hide on escape\n                    default: handled = false;\n                }\n            }\n            else if (event.keyCode == 36 && event.ctrlKey) { // display the time picker on ctrl+home\n                $.timepicker._showTimepicker(this);\n            }\n            else {\n                handled = false;\n            }\n            if (handled) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        },\n\n        /* Update selected time on keyUp */\n        /* Added verion 0.0.5 */\n        _doKeyUp: function (event) {\n            var inst = $.timepicker._getInst(event.target);\n            $.timepicker._setTimeFromField(inst);\n            $.timepicker._updateTimepicker(inst);\n        },\n\n        /* Make attachments based on settings. */\n        _attachments: function (input, inst) {\n            var appendText = this._get(inst, 'appendText');\n            var isRTL = this._get(inst, 'isRTL');\n            if (inst.append) { inst.append.remove(); }\n            if (appendText) {\n                inst.append = $('<span class=\"' + this._appendClass + '\">' + appendText + '</span>');\n                input[isRTL ? 'before' : 'after'](inst.append);\n            }\n            input.unbind('focus.timepicker', this._showTimepicker);\n            input.unbind('click.timepicker', this._adjustZIndex);\n\n            if (inst.trigger) { inst.trigger.remove(); }\n\n            var showOn = this._get(inst, 'showOn');\n            if (showOn == 'focus' || showOn == 'both') { // pop-up time picker when in the marked field\n                input.bind(\"focus.timepicker\", this._showTimepicker);\n                input.bind(\"click.timepicker\", this._adjustZIndex);\n            }\n            if (showOn == 'button' || showOn == 'both') { // pop-up time picker when 'button' element is clicked\n                var button = this._get(inst, 'button');\n\n                // Add button if button element is not set\n                if(button == null) {\n                    button = $('<button class=\"ui-timepicker-trigger\" type=\"button\">...</button>');\n                    input.after(button);\n                }\n\n                $(button).bind(\"click.timepicker\", function () {\n                    if ($.timepicker._timepickerShowing && $.timepicker._lastInput == input[0]) {\n                        $.timepicker._hideTimepicker();\n                    } else if (!inst.input.is(':disabled')) {\n                        $.timepicker._showTimepicker(input[0]);\n                    }\n                    return false;\n                });\n\n            }\n        },\n\n\n        /* Attach an inline time picker to a div. */\n        _inlineTimepicker: function(target, inst) {\n            var divSpan = $(target);\n            if (divSpan.hasClass(this.markerClassName))\n                return;\n            divSpan.addClass(this.markerClassName).append(inst.tpDiv).\n                bind(\"setData.timepicker\", function(event, key, value){\n                    inst.settings[key] = value;\n                }).bind(\"getData.timepicker\", function(event, key){\n                    return this._get(inst, key);\n                });\n            $.data(target, PROP_NAME, inst);\n\n            this._setTimeFromField(inst);\n            this._updateTimepicker(inst);\n            inst.tpDiv.show();\n        },\n\n        _adjustZIndex: function(input) {\n            input = input.target || input;\n            var inst = $.timepicker._getInst(input);\n            inst.tpDiv.css('zIndex', $.timepicker._getZIndex(input) +1);\n        },\n\n        /* Pop-up the time picker for a given input field.\n        @param  input  element - the input field attached to the time picker or\n        event - if triggered by focus */\n        _showTimepicker: function (input) {\n            input = input.target || input;\n            if (input.nodeName.toLowerCase() != 'input') { input = $('input', input.parentNode)[0]; } // find from button/image trigger\n\n            if ($.timepicker._isDisabledTimepicker(input) || $.timepicker._lastInput == input) { return; } // already here\n\n            // fix v 0.0.8 - close current timepicker before showing another one\n            $.timepicker._hideTimepicker();\n\n            var inst = $.timepicker._getInst(input);\n            if ($.timepicker._curInst && $.timepicker._curInst != inst) {\n                $.timepicker._curInst.tpDiv.stop(true, true);\n            }\n            var beforeShow = $.timepicker._get(inst, 'beforeShow');\n            extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));\n            inst.lastVal = null;\n            $.timepicker._lastInput = input;\n\n            $.timepicker._setTimeFromField(inst);\n\n            // calculate default position\n            if ($.timepicker._inDialog) { input.value = ''; } // hide cursor\n            if (!$.timepicker._pos) { // position below input\n                $.timepicker._pos = $.timepicker._findPos(input);\n                $.timepicker._pos[1] += input.offsetHeight; // add the height\n            }\n            var isFixed = false;\n            $(input).parents().each(function () {\n                isFixed |= $(this).css('position') == 'fixed';\n                return !isFixed;\n            });\n\n            var offset = { left: $.timepicker._pos[0], top: $.timepicker._pos[1] };\n\n            $.timepicker._pos = null;\n            // determine sizing offscreen\n            inst.tpDiv.css({ position: 'absolute', display: 'block', top: '-1000px' });\n            $.timepicker._updateTimepicker(inst);\n\n\n            // position with the ui position utility, if loaded\n            if ( ( ! inst.inline )  && ( typeof $.ui.position == 'object' ) ) {\n                inst.tpDiv.position({\n                    of: inst.input,\n                    my: $.timepicker._get( inst, 'myPosition' ),\n                    at: $.timepicker._get( inst, 'atPosition' ),\n                    // offset: $( \"#offset\" ).val(),\n                    // using: using,\n                    collision: 'flip'\n                });\n                var offset = inst.tpDiv.offset();\n                $.timepicker._pos = [offset.top, offset.left];\n            }\n\n\n            // reset clicked state\n            inst._hoursClicked = false;\n            inst._minutesClicked = false;\n\n            // fix width for dynamic number of time pickers\n            // and adjust position before showing\n            offset = $.timepicker._checkOffset(inst, offset, isFixed);\n            inst.tpDiv.css({ position: ($.timepicker._inDialog && $.blockUI ?\n\t\t\t    'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',\n                left: offset.left + 'px', top: offset.top + 'px'\n            });\n            if ( ! inst.inline ) {\n                var showAnim = $.timepicker._get(inst, 'showAnim');\n                var duration = $.timepicker._get(inst, 'duration');\n\n                var postProcess = function () {\n                    $.timepicker._timepickerShowing = true;\n                    var borders = $.timepicker._getBorders(inst.tpDiv);\n                    inst.tpDiv.find('iframe.ui-timepicker-cover'). // IE6- only\n\t\t\t\t\tcss({ left: -borders[0], top: -borders[1],\n\t\t\t\t\t    width: inst.tpDiv.outerWidth(), height: inst.tpDiv.outerHeight()\n\t\t\t\t\t});\n                };\n\n                // Fixed the zIndex problem for real (I hope) - FG - v 0.2.9\n                $.timepicker._adjustZIndex(input);\n                //inst.tpDiv.css('zIndex', $.timepicker._getZIndex(input) +1);\n\n                if ($.effects && $.effects[showAnim]) {\n                    inst.tpDiv.show(showAnim, $.timepicker._get(inst, 'showOptions'), duration, postProcess);\n                }\n                else {\n                    inst.tpDiv.show((showAnim ? duration : null), postProcess);\n                }\n                if (!showAnim || !duration) { postProcess(); }\n                if (inst.input.is(':visible') && !inst.input.is(':disabled')) { inst.input.focus(); }\n                $.timepicker._curInst = inst;\n            }\n        },\n\n        // This is an enhanced copy of the zIndex function of UI core 1.8.?? For backward compatibility.\n        // Enhancement returns maximum zindex value discovered while traversing parent elements,\n        // rather than the first zindex value found. Ensures the timepicker popup will be in front,\n        // even in funky scenarios like non-jq dialog containers with large fixed zindex values and\n        // nested zindex-influenced elements of their own.\n        _getZIndex: function (target) {\n            var elem = $(target);\n            var maxValue = 0;\n            var position, value;\n            while (elem.length && elem[0] !== document) {\n                position = elem.css(\"position\");\n                if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n                    value = parseInt(elem.css(\"zIndex\"), 10);\n                    if (!isNaN(value) && value !== 0) {\n                        if (value > maxValue) { maxValue = value; }\n                    }\n                }\n                elem = elem.parent();\n            }\n\n            return maxValue;\n        },\n\n        /* Refresh the time picker\n           @param   target  element - The target input field or inline container element. */\n        _refreshTimepicker: function(target) {\n            var inst = this._getInst(target);\n            if (inst) {\n                this._updateTimepicker(inst);\n            }\n        },\n\n\n        /* Generate the time picker content. */\n        _updateTimepicker: function (inst) {\n            inst.tpDiv.empty().append(this._generateHTML(inst));\n            this._rebindDialogEvents(inst);\n\n        },\n\n        _rebindDialogEvents: function (inst) {\n            var borders = $.timepicker._getBorders(inst.tpDiv),\n                self = this;\n            inst.tpDiv\n\t\t\t.find('iframe.ui-timepicker-cover') // IE6- only\n\t\t\t\t.css({ left: -borders[0], top: -borders[1],\n\t\t\t\t    width: inst.tpDiv.outerWidth(), height: inst.tpDiv.outerHeight()\n\t\t\t\t})\n\t\t\t.end()\n            // after the picker html is appended bind the click & double click events (faster in IE this way\n            // then letting the browser interpret the inline events)\n            // the binding for the minute cells also exists in _updateMinuteDisplay\n            .find('.ui-timepicker-minute-cell')\n                .unbind()\n                .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectMinutes, this))\n                .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectMinutes, this))\n            .end()\n            .find('.ui-timepicker-hour-cell')\n                .unbind()\n                .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectHours, this))\n                .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectHours, this))\n            .end()\n\t\t\t.find('.ui-timepicker td a')\n                .unbind()\n\t\t\t\t.bind('mouseout', function () {\n\t\t\t\t    $(this).removeClass('ui-state-hover');\n\t\t\t\t    if (this.className.indexOf('ui-timepicker-prev') != -1) $(this).removeClass('ui-timepicker-prev-hover');\n\t\t\t\t    if (this.className.indexOf('ui-timepicker-next') != -1) $(this).removeClass('ui-timepicker-next-hover');\n\t\t\t\t})\n\t\t\t\t.bind('mouseover', function () {\n\t\t\t\t    if ( ! self._isDisabledTimepicker(inst.inline ? inst.tpDiv.parent()[0] : inst.input[0])) {\n\t\t\t\t        $(this).parents('.ui-timepicker-calendar').find('a').removeClass('ui-state-hover');\n\t\t\t\t        $(this).addClass('ui-state-hover');\n\t\t\t\t        if (this.className.indexOf('ui-timepicker-prev') != -1) $(this).addClass('ui-timepicker-prev-hover');\n\t\t\t\t        if (this.className.indexOf('ui-timepicker-next') != -1) $(this).addClass('ui-timepicker-next-hover');\n\t\t\t\t    }\n\t\t\t\t})\n\t\t\t.end()\n\t\t\t.find('.' + this._dayOverClass + ' a')\n\t\t\t\t.trigger('mouseover')\n\t\t\t.end()\n            .find('.ui-timepicker-now').bind(\"click\", function(e) {\n                    $.timepicker.selectNow(e);\n            }).end()\n            .find('.ui-timepicker-deselect').bind(\"click\",function(e) {\n                    $.timepicker.deselectTime(e);\n            }).end()\n            .find('.ui-timepicker-close').bind(\"click\",function(e) {\n                    $.timepicker._hideTimepicker();\n            }).end();\n        },\n\n        /* Generate the HTML for the current state of the time picker. */\n        _generateHTML: function (inst) {\n\n            var h, m, row, col, html, hoursHtml, minutesHtml = '',\n                showPeriod = (this._get(inst, 'showPeriod') == true),\n                showPeriodLabels = (this._get(inst, 'showPeriodLabels') == true),\n                showLeadingZero = (this._get(inst, 'showLeadingZero') == true),\n                showHours = (this._get(inst, 'showHours') == true),\n                showMinutes = (this._get(inst, 'showMinutes') == true),\n                amPmText = this._get(inst, 'amPmText'),\n                rows = this._get(inst, 'rows'),\n                amRows = 0,\n                pmRows = 0,\n                amItems = 0,\n                pmItems = 0,\n                amFirstRow = 0,\n                pmFirstRow = 0,\n                hours = Array(),\n                hours_options = this._get(inst, 'hours'),\n                hoursPerRow = null,\n                hourCounter = 0,\n                hourLabel = this._get(inst, 'hourText'),\n                showCloseButton = this._get(inst, 'showCloseButton'),\n                closeButtonText = this._get(inst, 'closeButtonText'),\n                showNowButton = this._get(inst, 'showNowButton'),\n                nowButtonText = this._get(inst, 'nowButtonText'),\n                showDeselectButton = this._get(inst, 'showDeselectButton'),\n                deselectButtonText = this._get(inst, 'deselectButtonText'),\n                showButtonPanel = showCloseButton || showNowButton || showDeselectButton;\n\n\n\n            // prepare all hours and minutes, makes it easier to distribute by rows\n            for (h = hours_options.starts; h <= hours_options.ends; h++) {\n                hours.push (h);\n            }\n            hoursPerRow = Math.ceil(hours.length / rows); // always round up\n\n            if (showPeriodLabels) {\n                for (hourCounter = 0; hourCounter < hours.length; hourCounter++) {\n                    if (hours[hourCounter] < 12) {\n                        amItems++;\n                    }\n                    else {\n                        pmItems++;\n                    }\n                }\n                hourCounter = 0;\n\n                amRows = Math.floor(amItems / hours.length * rows);\n                pmRows = Math.floor(pmItems / hours.length * rows);\n\n                // assign the extra row to the period that is more densely populated\n                if (rows != amRows + pmRows) {\n                    // Make sure: AM Has Items and either PM Does Not, AM has no rows yet, or AM is more dense\n                    if (amItems && (!pmItems || !amRows || (pmRows && amItems / amRows >= pmItems / pmRows))) {\n                        amRows++;\n                    } else {\n                        pmRows++;\n                    }\n                }\n                amFirstRow = Math.min(amRows, 1);\n                pmFirstRow = amRows + 1;\n\n                if (amRows == 0) {\n                    hoursPerRow = Math.ceil(pmItems / pmRows);\n                } else if (pmRows == 0) {\n                    hoursPerRow = Math.ceil(amItems / amRows);\n                } else {\n                    hoursPerRow = Math.ceil(Math.max(amItems / amRows, pmItems / pmRows));\n                }\n            }\n\n\n            html = '<table class=\"ui-timepicker-table ui-widget-content ui-corner-all\"><tr>';\n\n            if (showHours) {\n\n                html += '<td class=\"ui-timepicker-hours\">' +\n                        '<div class=\"ui-timepicker-title ui-widget-header ui-helper-clearfix ui-corner-all\">' +\n                        hourLabel +\n                        '</div>' +\n                        '<table class=\"ui-timepicker\">';\n\n                for (row = 1; row <= rows; row++) {\n                    html += '<tr>';\n                    // AM\n                    if (row == amFirstRow && showPeriodLabels) {\n                        html += '<th rowspan=\"' + amRows.toString() + '\" class=\"periods\" scope=\"row\">' + amPmText[0] + '</th>';\n                    }\n                    // PM\n                    if (row == pmFirstRow && showPeriodLabels) {\n                        html += '<th rowspan=\"' + pmRows.toString() + '\" class=\"periods\" scope=\"row\">' + amPmText[1] + '</th>';\n                    }\n                    for (col = 1; col <= hoursPerRow; col++) {\n                        if (showPeriodLabels && row < pmFirstRow && hours[hourCounter] >= 12) {\n                            html += this._generateHTMLHourCell(inst, undefined, showPeriod, showLeadingZero);\n                        } else {\n                            html += this._generateHTMLHourCell(inst, hours[hourCounter], showPeriod, showLeadingZero);\n                            hourCounter++;\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</table>' + // Close the hours cells table\n                        '</td>'; // Close the Hour td\n            }\n\n            if (showMinutes) {\n                html += '<td class=\"ui-timepicker-minutes\">';\n                html += this._generateHTMLMinutes(inst);\n                html += '</td>';\n            }\n\n            html += '</tr>';\n\n\n            if (showButtonPanel) {\n                var buttonPanel = '<tr><td colspan=\"3\"><div class=\"ui-timepicker-buttonpane ui-widget-content\">';\n                if (showNowButton) {\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-now ui-state-default ui-corner-all\" '\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\n                                   + nowButtonText + '</button>';\n                }\n                if (showDeselectButton) {\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-deselect ui-state-default ui-corner-all\" '\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\n                                   + deselectButtonText + '</button>';\n                }\n                if (showCloseButton) {\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-close ui-state-default ui-corner-all\" '\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\n                                   + closeButtonText + '</button>';\n                }\n\n                html += buttonPanel + '</div></td></tr>';\n            }\n            html += '</table>';\n\n            return html;\n        },\n\n        /* Special function that update the minutes selection in currently visible timepicker\n         * called on hour selection when onMinuteShow is defined  */\n        _updateMinuteDisplay: function (inst) {\n            var newHtml = this._generateHTMLMinutes(inst);\n            inst.tpDiv.find('td.ui-timepicker-minutes').html(newHtml);\n            this._rebindDialogEvents(inst);\n                // after the picker html is appended bind the click & double click events (faster in IE this way\n                // then letting the browser interpret the inline events)\n                // yes I know, duplicate code, sorry\n/*                .find('.ui-timepicker-minute-cell')\n                    .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectMinutes, this))\n                    .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectMinutes, this));\n*/\n\n        },\n\n        /*\n         * Generate the minutes table\n         * This is separated from the _generateHTML function because is can be called separately (when hours changes)\n         */\n        _generateHTMLMinutes: function (inst) {\n\n            var m, row, html = '',\n                rows = this._get(inst, 'rows'),\n                minutes = Array(),\n                minutes_options = this._get(inst, 'minutes'),\n                minutesPerRow = null,\n                minuteCounter = 0,\n                showMinutesLeadingZero = (this._get(inst, 'showMinutesLeadingZero') == true),\n                onMinuteShow = this._get(inst, 'onMinuteShow'),\n                minuteLabel = this._get(inst, 'minuteText');\n\n            if ( ! minutes_options.starts) {\n                minutes_options.starts = 0;\n            }\n            if ( ! minutes_options.ends) {\n                minutes_options.ends = 59;\n            }\n            if ( ! minutes_options.manual) {\n                minutes_options.manual = [];\n            }\n            for (m = minutes_options.starts; m <= minutes_options.ends; m += minutes_options.interval) {\n                minutes.push(m);\n            }\n            for (i = 0; i < minutes_options.manual.length;i++) {\n                var currMin = minutes_options.manual[i];\n\n                // Validate & filter duplicates of manual minute input\n                if (typeof currMin != 'number' || currMin < 0 || currMin > 59 || $.inArray(currMin, minutes) >= 0) {\n                    continue;\n                }\n                minutes.push(currMin);\n            }\n\n            // Sort to get correct order after adding manual minutes\n            // Use compare function to sort by number, instead of string (default)\n            minutes.sort(function(a, b) {\n                return a-b;\n            });\n\n            minutesPerRow = Math.round(minutes.length / rows + 0.49); // always round up\n\n            /*\n             * The minutes table\n             */\n            // if currently selected minute is not enabled, we have a problem and need to select a new minute.\n            if (onMinuteShow &&\n                (onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours , inst.minutes]) == false) ) {\n                // loop minutes and select first available\n                for (minuteCounter = 0; minuteCounter < minutes.length; minuteCounter += 1) {\n                    m = minutes[minuteCounter];\n                    if (onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours, m])) {\n                        inst.minutes = m;\n                        break;\n                    }\n                }\n            }\n\n\n\n            html += '<div class=\"ui-timepicker-title ui-widget-header ui-helper-clearfix ui-corner-all\">' +\n                    minuteLabel +\n                    '</div>' +\n                    '<table class=\"ui-timepicker\">';\n\n            minuteCounter = 0;\n            for (row = 1; row <= rows; row++) {\n                html += '<tr>';\n                while (minuteCounter < row * minutesPerRow) {\n                    var m = minutes[minuteCounter];\n                    var displayText = '';\n                    if (m !== undefined ) {\n                        displayText = (m < 10) && showMinutesLeadingZero ? \"0\" + m.toString() : m.toString();\n                    }\n                    html += this._generateHTMLMinuteCell(inst, m, displayText);\n                    minuteCounter++;\n                }\n                html += '</tr>';\n            }\n\n            html += '</table>';\n\n            return html;\n        },\n\n        /* Generate the content of a \"Hour\" cell */\n        _generateHTMLHourCell: function (inst, hour, showPeriod, showLeadingZero) {\n\n            var displayHour = hour;\n            if ((hour > 12) && showPeriod) {\n                displayHour = hour - 12;\n            }\n            if ((displayHour == 0) && showPeriod) {\n                displayHour = 12;\n            }\n            if ((displayHour < 10) && showLeadingZero) {\n                displayHour = '0' + displayHour;\n            }\n\n            var html = \"\";\n            var enabled = true;\n            var onHourShow = this._get(inst, 'onHourShow');\t\t//custom callback\n            var maxTime = this._get(inst, 'maxTime');\n            var minTime = this._get(inst, 'minTime');\n\n            if (hour == undefined) {\n                html = '<td><span class=\"ui-state-default ui-state-disabled\">&nbsp;</span></td>';\n                return html;\n            }\n\n            if (onHourShow) {\n            \tenabled = onHourShow.apply((inst.input ? inst.input[0] : null), [hour]);\n            }\n\t\t\t\n            if (enabled) {\n                if ( !isNaN(parseInt(maxTime.hour)) && hour > maxTime.hour ) enabled = false;\n                if ( !isNaN(parseInt(minTime.hour)) && hour < minTime.hour ) enabled = false;\n            }\n\t\t\t\n            if (enabled) {\n                html = '<td class=\"ui-timepicker-hour-cell\" data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" data-hour=\"' + hour.toString() + '\">' +\n                   '<a class=\"ui-state-default ' +\n                   (hour == inst.hours ? 'ui-state-active' : '') +\n                   '\">' +\n                   displayHour.toString() +\n                   '</a></td>';\n            }\n            else {\n            \thtml =\n            \t\t'<td>' +\n\t\t                '<span class=\"ui-state-default ui-state-disabled ' +\n\t\t                (hour == inst.hours ? ' ui-state-active ' : ' ') +\n\t\t                '\">' +\n\t\t                displayHour.toString() +\n\t\t                '</span>' +\n\t\t            '</td>';\n            }\n            return html;\n        },\n\n        /* Generate the content of a \"Hour\" cell */\n        _generateHTMLMinuteCell: function (inst, minute, displayText) {\n             var html = \"\";\n             var enabled = true;\n             var hour = inst.hours;\n             var onMinuteShow = this._get(inst, 'onMinuteShow');\t\t//custom callback\n             var maxTime = this._get(inst, 'maxTime');\n             var minTime = this._get(inst, 'minTime');\n\n             if (onMinuteShow) {\n            \t //NEW: 2011-02-03  we should give the hour as a parameter as well!\n             \tenabled = onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours,minute]);\t\t//trigger callback\n             }\n\n             if (minute == undefined) {\n                 html = '<td><span class=\"ui-state-default ui-state-disabled\">&nbsp;</span></td>';\n                 return html;\n             }\n\n            if (enabled && hour !== null) {\n                if ( !isNaN(parseInt(maxTime.hour)) && !isNaN(parseInt(maxTime.minute)) && hour >= maxTime.hour && minute > maxTime.minute ) enabled = false;\n                if ( !isNaN(parseInt(minTime.hour)) && !isNaN(parseInt(minTime.minute)) && hour <= minTime.hour && minute < minTime.minute ) enabled = false;\n            }\n\t\t\t\n             if (enabled) {\n\t             html = '<td class=\"ui-timepicker-minute-cell\" data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" data-minute=\"' + minute.toString() + '\" >' +\n\t                   '<a class=\"ui-state-default ' +\n\t                   (minute == inst.minutes ? 'ui-state-active' : '') +\n\t                   '\" >' +\n\t                   displayText +\n\t                   '</a></td>';\n             }\n             else {\n\n            \thtml = '<td>' +\n\t                 '<span class=\"ui-state-default ui-state-disabled\" >' +\n\t                 \tdisplayText +\n\t                 '</span>' +\n                 '</td>';\n             }\n             return html;\n        },\n\n\n        /* Detach a timepicker from its control.\n           @param  target    element - the target input field or division or span */\n        _destroyTimepicker: function(target) {\n            var $target = $(target);\n            var inst = $.data(target, PROP_NAME);\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            $.removeData(target, PROP_NAME);\n            if (nodeName == 'input') {\n                inst.append.remove();\n                inst.trigger.remove();\n                $target.removeClass(this.markerClassName)\n                    .unbind('focus.timepicker', this._showTimepicker)\n                    .unbind('click.timepicker', this._adjustZIndex);\n            } else if (nodeName == 'div' || nodeName == 'span')\n                $target.removeClass(this.markerClassName).empty();\n        },\n\n        /* Enable the date picker to a jQuery selection.\n           @param  target    element - the target input field or division or span */\n        _enableTimepicker: function(target) {\n            var $target = $(target),\n                target_id = $target.attr('id'),\n                inst = $.data(target, PROP_NAME);\n\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            if (nodeName == 'input') {\n                target.disabled = false;\n                var button = this._get(inst, 'button');\n                $(button).removeClass('ui-state-disabled').disabled = false;\n                inst.trigger.filter('button').\n                    each(function() { this.disabled = false; }).end();\n            }\n            else if (nodeName == 'div' || nodeName == 'span') {\n                var inline = $target.children('.' + this._inlineClass);\n                inline.children().removeClass('ui-state-disabled');\n                inline.find('button').each(\n                    function() { this.disabled = false }\n                )\n            }\n            this._disabledInputs = $.map(this._disabledInputs,\n                function(value) { return (value == target_id ? null : value); }); // delete entry\n        },\n\n        /* Disable the time picker to a jQuery selection.\n           @param  target    element - the target input field or division or span */\n        _disableTimepicker: function(target) {\n            var $target = $(target);\n            var inst = $.data(target, PROP_NAME);\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            if (nodeName == 'input') {\n                var button = this._get(inst, 'button');\n\n                $(button).addClass('ui-state-disabled').disabled = true;\n                target.disabled = true;\n\n                inst.trigger.filter('button').\n                    each(function() { this.disabled = true; }).end();\n\n            }\n            else if (nodeName == 'div' || nodeName == 'span') {\n                var inline = $target.children('.' + this._inlineClass);\n                inline.children().addClass('ui-state-disabled');\n                inline.find('button').each(\n                    function() { this.disabled = true }\n                )\n\n            }\n            this._disabledInputs = $.map(this._disabledInputs,\n                function(value) { return (value == target ? null : value); }); // delete entry\n            this._disabledInputs[this._disabledInputs.length] = $target.attr('id');\n        },\n\n        /* Is the first field in a jQuery collection disabled as a timepicker?\n        @param  target_id element - the target input field or division or span\n        @return boolean - true if disabled, false if enabled */\n        _isDisabledTimepicker: function (target_id) {\n            if ( ! target_id) { return false; }\n            for (var i = 0; i < this._disabledInputs.length; i++) {\n                if (this._disabledInputs[i] == target_id) { return true; }\n            }\n            return false;\n        },\n\n        /* Check positioning to remain on screen. */\n        _checkOffset: function (inst, offset, isFixed) {\n            var tpWidth = inst.tpDiv.outerWidth();\n            var tpHeight = inst.tpDiv.outerHeight();\n            var inputWidth = inst.input ? inst.input.outerWidth() : 0;\n            var inputHeight = inst.input ? inst.input.outerHeight() : 0;\n            var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();\n            var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();\n\n            offset.left -= (this._get(inst, 'isRTL') ? (tpWidth - inputWidth) : 0);\n            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;\n            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;\n\n            // now check if timepicker is showing outside window viewport - move to a better place if so.\n            offset.left -= Math.min(offset.left, (offset.left + tpWidth > viewWidth && viewWidth > tpWidth) ?\n\t\t\tMath.abs(offset.left + tpWidth - viewWidth) : 0);\n            offset.top -= Math.min(offset.top, (offset.top + tpHeight > viewHeight && viewHeight > tpHeight) ?\n\t\t\tMath.abs(tpHeight + inputHeight) : 0);\n\n            return offset;\n        },\n\n        /* Find an object's position on the screen. */\n        _findPos: function (obj) {\n            var inst = this._getInst(obj);\n            var isRTL = this._get(inst, 'isRTL');\n            while (obj && (obj.type == 'hidden' || obj.nodeType != 1)) {\n                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];\n            }\n            var position = $(obj).offset();\n            return [position.left, position.top];\n        },\n\n        /* Retrieve the size of left and top borders for an element.\n        @param  elem  (jQuery object) the element of interest\n        @return  (number[2]) the left and top borders */\n        _getBorders: function (elem) {\n            var convert = function (value) {\n                return { thin: 1, medium: 2, thick: 3}[value] || value;\n            };\n            return [parseFloat(convert(elem.css('border-left-width'))),\n\t\t\tparseFloat(convert(elem.css('border-top-width')))];\n        },\n\n\n        /* Close time picker if clicked elsewhere. */\n        _checkExternalClick: function (event) {\n            if (!$.timepicker._curInst) { return; }\n            var $target = $(event.target);\n            if ($target[0].id != $.timepicker._mainDivId &&\n\t\t\t\t$target.parents('#' + $.timepicker._mainDivId).length == 0 &&\n\t\t\t\t!$target.hasClass($.timepicker.markerClassName) &&\n\t\t\t\t!$target.hasClass($.timepicker._triggerClass) &&\n\t\t\t\t$.timepicker._timepickerShowing && !($.timepicker._inDialog && $.blockUI))\n                $.timepicker._hideTimepicker();\n        },\n\n        /* Hide the time picker from view.\n        @param  input  element - the input field attached to the time picker */\n        _hideTimepicker: function (input) {\n            var inst = this._curInst;\n            if (!inst || (input && inst != $.data(input, PROP_NAME))) { return; }\n            if (this._timepickerShowing) {\n                var showAnim = this._get(inst, 'showAnim');\n                var duration = this._get(inst, 'duration');\n                var postProcess = function () {\n                    $.timepicker._tidyDialog(inst);\n                    this._curInst = null;\n                };\n                if ($.effects && $.effects[showAnim]) {\n                    inst.tpDiv.hide(showAnim, $.timepicker._get(inst, 'showOptions'), duration, postProcess);\n                }\n                else {\n                    inst.tpDiv[(showAnim == 'slideDown' ? 'slideUp' :\n\t\t\t\t\t    (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);\n                }\n                if (!showAnim) { postProcess(); }\n\n                this._timepickerShowing = false;\n\n                this._lastInput = null;\n                if (this._inDialog) {\n                    this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });\n                    if ($.blockUI) {\n                        $.unblockUI();\n                        $('body').append(this.tpDiv);\n                    }\n                }\n                this._inDialog = false;\n\n                var onClose = this._get(inst, 'onClose');\n                 if (onClose) {\n                     onClose.apply(\n                         (inst.input ? inst.input[0] : null),\n \t\t\t\t\t    [(inst.input ? inst.input.val() : ''), inst]);  // trigger custom callback\n                 }\n\n            }\n        },\n\n\n\n        /* Tidy up after a dialog display. */\n        _tidyDialog: function (inst) {\n            inst.tpDiv.removeClass(this._dialogClass).unbind('.ui-timepicker');\n        },\n\n        /* Retrieve the instance data for the target control.\n        @param  target  element - the target input field or division or span\n        @return  object - the associated instance data\n        @throws  error if a jQuery problem getting data */\n        _getInst: function (target) {\n            try {\n                return $.data(target, PROP_NAME);\n            }\n            catch (err) {\n                throw 'Missing instance data for this timepicker';\n            }\n        },\n\n        /* Get a setting value, defaulting if necessary. */\n        _get: function (inst, name) {\n            return inst.settings[name] !== undefined ?\n\t\t\tinst.settings[name] : this._defaults[name];\n        },\n\n        /* Parse existing time and initialise time picker. */\n        _setTimeFromField: function (inst) {\n            if (inst.input.val() == inst.lastVal) { return; }\n            var defaultTime = this._get(inst, 'defaultTime');\n\n            var timeToParse = defaultTime == 'now' ? this._getCurrentTimeRounded(inst) : defaultTime;\n            if ((inst.inline == false) && (inst.input.val() != '')) { timeToParse = inst.input.val() }\n\n            if (timeToParse instanceof Date) {\n                inst.hours = timeToParse.getHours();\n                inst.minutes = timeToParse.getMinutes();\n            } else {\n                var timeVal = inst.lastVal = timeToParse;\n                if (timeToParse == '') {\n                    inst.hours = -1;\n                    inst.minutes = -1;\n                } else {\n                    var time = this.parseTime(inst, timeVal);\n                    inst.hours = time.hours;\n                    inst.minutes = time.minutes;\n                }\n            }\n\n\n            $.timepicker._updateTimepicker(inst);\n        },\n\n        /* Update or retrieve the settings for an existing time picker.\n           @param  target  element - the target input field or division or span\n           @param  name    object - the new settings to update or\n                           string - the name of the setting to change or retrieve,\n                           when retrieving also 'all' for all instance settings or\n                           'defaults' for all global defaults\n           @param  value   any - the new value for the setting\n                       (omit if above is an object or to retrieve a value) */\n        _optionTimepicker: function(target, name, value) {\n            var inst = this._getInst(target);\n            if (arguments.length == 2 && typeof name == 'string') {\n                return (name == 'defaults' ? $.extend({}, $.timepicker._defaults) :\n                    (inst ? (name == 'all' ? $.extend({}, inst.settings) :\n                    this._get(inst, name)) : null));\n            }\n            var settings = name || {};\n            if (typeof name == 'string') {\n                settings = {};\n                settings[name] = value;\n            }\n            if (inst) {\n                extendRemove(inst.settings, settings);\n                if (this._curInst == inst) {\n                    this._hideTimepicker();\n                \tthis._updateTimepicker(inst);\n                }\n                if (inst.inline) {\n                    this._updateTimepicker(inst);\n                }\n            }\n        },\n\n\n        /* Set the time for a jQuery selection.\n\t    @param  target  element - the target input field or division or span\n\t    @param  time    String - the new time */\n\t    _setTimeTimepicker: function(target, time) {\n\t\t    var inst = this._getInst(target);\n\t\t    if (inst) {\n\t\t\t    this._setTime(inst, time);\n    \t\t\tthis._updateTimepicker(inst);\n\t    \t\tthis._updateAlternate(inst, time);\n\t\t    }\n\t    },\n\n        /* Set the time directly. */\n        _setTime: function(inst, time, noChange) {\n            var origHours = inst.hours;\n            var origMinutes = inst.minutes;\n            if (time instanceof Date) {\n                inst.hours = time.getHours();\n                inst.minutes = time.getMinutes();\n            } else {\n                var time = this.parseTime(inst, time);\n                inst.hours = time.hours;\n                inst.minutes = time.minutes;\n            }\n\n            if ((origHours != inst.hours || origMinutes != inst.minutes) && !noChange) {\n                inst.input.trigger('change');\n            }\n            this._updateTimepicker(inst);\n            this._updateSelectedValue(inst);\n        },\n\n        /* Return the current time, ready to be parsed, rounded to the closest minute by interval */\n        _getCurrentTimeRounded: function (inst) {\n            var currentTime = new Date(),\n                currentMinutes = currentTime.getMinutes(),\n                minutes_options = this._get(inst, 'minutes'),\n                // round to closest interval\n                adjustedMinutes = Math.round(currentMinutes / minutes_options.interval) * minutes_options.interval;\n            currentTime.setMinutes(adjustedMinutes);\n            return currentTime;\n        },\n\n        /*\n        * Parse a time string into hours and minutes\n        */\n        parseTime: function (inst, timeVal) {\n            var retVal = new Object();\n            retVal.hours = -1;\n            retVal.minutes = -1;\n\n            if(!timeVal)\n                return '';\n\n            var timeSeparator = this._get(inst, 'timeSeparator'),\n                amPmText = this._get(inst, 'amPmText'),\n                showHours = this._get(inst, 'showHours'),\n                showMinutes = this._get(inst, 'showMinutes'),\n                optionalMinutes = this._get(inst, 'optionalMinutes'),\n                showPeriod = (this._get(inst, 'showPeriod') == true),\n                p = timeVal.indexOf(timeSeparator);\n\n            // check if time separator found\n            if (p != -1) {\n                retVal.hours = parseInt(timeVal.substr(0, p), 10);\n                retVal.minutes = parseInt(timeVal.substr(p + 1), 10);\n            }\n            // check for hours only\n            else if ( (showHours) && ( !showMinutes || optionalMinutes ) ) {\n                retVal.hours = parseInt(timeVal, 10);\n            }\n            // check for minutes only\n            else if ( ( ! showHours) && (showMinutes) ) {\n                retVal.minutes = parseInt(timeVal, 10);\n            }\n\n            if (showHours) {\n                var timeValUpper = timeVal.toUpperCase();\n                if ((retVal.hours < 12) && (showPeriod) && (timeValUpper.indexOf(amPmText[1].toUpperCase()) != -1)) {\n                    retVal.hours += 12;\n                }\n                // fix for 12 AM\n                if ((retVal.hours == 12) && (showPeriod) && (timeValUpper.indexOf(amPmText[0].toUpperCase()) != -1)) {\n                    retVal.hours = 0;\n                }\n            }\n\n            return retVal;\n        },\n\n        selectNow: function(event) {\n            var id = $(event.target).attr(\"data-timepicker-instance-id\"),\n                $target = $(id),\n                inst = this._getInst($target[0]);\n            //if (!inst || (input && inst != $.data(input, PROP_NAME))) { return; }\n            var currentTime = new Date();\n            inst.hours = currentTime.getHours();\n            inst.minutes = currentTime.getMinutes();\n            this._updateSelectedValue(inst);\n            this._updateTimepicker(inst);\n            this._hideTimepicker();\n        },\n\n        deselectTime: function(event) {\n            var id = $(event.target).attr(\"data-timepicker-instance-id\"),\n                $target = $(id),\n                inst = this._getInst($target[0]);\n            inst.hours = -1;\n            inst.minutes = -1;\n            this._updateSelectedValue(inst);\n            this._hideTimepicker();\n        },\n\n\n        selectHours: function (event) {\n            var $td = $(event.currentTarget),\n                id = $td.attr(\"data-timepicker-instance-id\"),\n                newHours = parseInt($td.attr(\"data-hour\")),\n                fromDoubleClick = event.data.fromDoubleClick,\n                $target = $(id),\n                inst = this._getInst($target[0]),\n                showMinutes = (this._get(inst, 'showMinutes') == true);\n\n            // don't select if disabled\n            if ( $.timepicker._isDisabledTimepicker($target.attr('id')) ) { return false }\n\n            $td.parents('.ui-timepicker-hours:first').find('a').removeClass('ui-state-active');\n            $td.children('a').addClass('ui-state-active');\n            inst.hours = newHours;\n\n            // added for onMinuteShow callback\n            var onMinuteShow = this._get(inst, 'onMinuteShow'),\n                maxTime = this._get(inst, 'maxTime'),\n                minTime = this._get(inst, 'minTime');\n            if (onMinuteShow || maxTime.minute || minTime.minute) {\n                // this will trigger a callback on selected hour to make sure selected minute is allowed. \n                this._updateMinuteDisplay(inst);\n            }\n\n            this._updateSelectedValue(inst);\n\n            inst._hoursClicked = true;\n            if ((inst._minutesClicked) || (fromDoubleClick) || (showMinutes == false)) {\n                $.timepicker._hideTimepicker();\n            }\n            // return false because if used inline, prevent the url to change to a hashtag\n            return false;\n        },\n\n        selectMinutes: function (event) {\n            var $td = $(event.currentTarget),\n                id = $td.attr(\"data-timepicker-instance-id\"),\n                newMinutes = parseInt($td.attr(\"data-minute\")),\n                fromDoubleClick = event.data.fromDoubleClick,\n                $target = $(id),\n                inst = this._getInst($target[0]),\n                showHours = (this._get(inst, 'showHours') == true);\n\n            // don't select if disabled\n            if ( $.timepicker._isDisabledTimepicker($target.attr('id')) ) { return false }\n\n            $td.parents('.ui-timepicker-minutes:first').find('a').removeClass('ui-state-active');\n            $td.children('a').addClass('ui-state-active');\n\n            inst.minutes = newMinutes;\n            this._updateSelectedValue(inst);\n\n            inst._minutesClicked = true;\n            if ((inst._hoursClicked) || (fromDoubleClick) || (showHours == false)) {\n                $.timepicker._hideTimepicker();\n                // return false because if used inline, prevent the url to change to a hashtag\n                return false;\n            }\n\n            // return false because if used inline, prevent the url to change to a hashtag\n            return false;\n        },\n\n        _updateSelectedValue: function (inst) {\n            var newTime = this._getParsedTime(inst);\n            if (inst.input) {\n                inst.input.val(newTime);\n                inst.input.trigger('change');\n            }\n            var onSelect = this._get(inst, 'onSelect');\n            if (onSelect) { onSelect.apply((inst.input ? inst.input[0] : null), [newTime, inst]); } // trigger custom callback\n            this._updateAlternate(inst, newTime);\n            return newTime;\n        },\n\n        /* this function process selected time and return it parsed according to instance options */\n        _getParsedTime: function(inst) {\n\n            if (inst.hours == -1 && inst.minutes == -1) {\n                return '';\n            }\n\n            // default to 0 AM if hours is not valid\n            if ((inst.hours < inst.hours.starts) || (inst.hours > inst.hours.ends )) { inst.hours = 0; }\n            // default to 0 minutes if minute is not valid\n            if ((inst.minutes < inst.minutes.starts) || (inst.minutes > inst.minutes.ends)) { inst.minutes = 0; }\n\n            var period = \"\",\n                showPeriod = (this._get(inst, 'showPeriod') == true),\n                showLeadingZero = (this._get(inst, 'showLeadingZero') == true),\n                showHours = (this._get(inst, 'showHours') == true),\n                showMinutes = (this._get(inst, 'showMinutes') == true),\n                optionalMinutes = (this._get(inst, 'optionalMinutes') == true),\n                amPmText = this._get(inst, 'amPmText'),\n                selectedHours = inst.hours ? inst.hours : 0,\n                selectedMinutes = inst.minutes ? inst.minutes : 0,\n                displayHours = selectedHours ? selectedHours : 0,\n                parsedTime = '';\n\n            // fix some display problem when hours or minutes are not selected yet\n            if (displayHours == -1) { displayHours = 0 }\n            if (selectedMinutes == -1) { selectedMinutes = 0 }\n\n            if (showPeriod) {\n                if (inst.hours == 0) {\n                    displayHours = 12;\n                }\n                if (inst.hours < 12) {\n                    period = amPmText[0];\n                }\n                else {\n                    period = amPmText[1];\n                    if (displayHours > 12) {\n                        displayHours -= 12;\n                    }\n                }\n            }\n\n            var h = displayHours.toString();\n            if (showLeadingZero && (displayHours < 10)) { h = '0' + h; }\n\n            var m = selectedMinutes.toString();\n            if (selectedMinutes < 10) { m = '0' + m; }\n\n            if (showHours) {\n                parsedTime += h;\n            }\n            if (showHours && showMinutes && (!optionalMinutes || m != 0)) {\n                parsedTime += this._get(inst, 'timeSeparator');\n            }\n            if (showMinutes && (!optionalMinutes || m != 0)) {\n                parsedTime += m;\n            }\n            if (showHours) {\n                if (period.length > 0) { parsedTime += this._get(inst, 'periodSeparator') + period; }\n            }\n\n            return parsedTime;\n        },\n\n        /* Update any alternate field to synchronise with the main field. */\n        _updateAlternate: function(inst, newTime) {\n            var altField = this._get(inst, 'altField');\n            if (altField) { // update alternate field too\n                $(altField).each(function(i,e) {\n                    $(e).val(newTime);\n                });\n            }\n        },\n\n        _getTimeAsDateTimepicker: function(input) {\n            var inst = this._getInst(input);\n            if (inst.hours == -1 && inst.minutes == -1) {\n                return '';\n            }\n\n            // default to 0 AM if hours is not valid\n            if ((inst.hours < inst.hours.starts) || (inst.hours > inst.hours.ends )) { inst.hours = 0; }\n            // default to 0 minutes if minute is not valid\n            if ((inst.minutes < inst.minutes.starts) || (inst.minutes > inst.minutes.ends)) { inst.minutes = 0; }\n\n            return new Date(0, 0, 0, inst.hours, inst.minutes, 0);\n        },\n        /* This might look unused but it's called by the $.fn.timepicker function with param getTime */\n        /* added v 0.2.3 - gitHub issue #5 - Thanks edanuff */\n        _getTimeTimepicker : function(input) {\n            var inst = this._getInst(input);\n            return this._getParsedTime(inst);\n        },\n        _getHourTimepicker: function(input) {\n            var inst = this._getInst(input);\n            if ( inst == undefined) { return -1; }\n            return inst.hours;\n        },\n        _getMinuteTimepicker: function(input) {\n            var inst= this._getInst(input);\n            if ( inst == undefined) { return -1; }\n            return inst.minutes;\n        }\n\n    });\n\n\n\n    /* Invoke the timepicker functionality.\n    @param  options  string - a command, optionally followed by additional parameters or\n    Object - settings for attaching new timepicker functionality\n    @return  jQuery object */\n    $.fn.timepicker = function (options) {\n        /* Initialise the time picker. */\n        if (!$.timepicker.initialized) {\n            $(document).mousedown($.timepicker._checkExternalClick);\n            $.timepicker.initialized = true;\n        }\n\n         /* Append timepicker main container to body if not exist. */\n        if ($(\"#\"+$.timepicker._mainDivId).length === 0) {\n            $('body').append($.timepicker.tpDiv);\n        }\n\n        var otherArgs = Array.prototype.slice.call(arguments, 1);\n        if (typeof options == 'string' && (options == 'getTime' || options == 'getTimeAsDate' || options == 'getHour' || options == 'getMinute' ))\n            return $.timepicker['_' + options + 'Timepicker'].\n\t\t\t    apply($.timepicker, [this[0]].concat(otherArgs));\n        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')\n            return $.timepicker['_' + options + 'Timepicker'].\n                apply($.timepicker, [this[0]].concat(otherArgs));\n        return this.each(function () {\n            typeof options == 'string' ?\n\t\t\t$.timepicker['_' + options + 'Timepicker'].\n\t\t\t\tapply($.timepicker, [this].concat(otherArgs)) :\n\t\t\t$.timepicker._attachTimepicker(this, options);\n        });\n    };\n\n    /* jQuery extend now ignores nulls! */\n    function extendRemove(target, props) {\n        $.extend(target, props);\n        for (var name in props)\n            if (props[name] == null || props[name] == undefined)\n                target[name] = props[name];\n        return target;\n    };\n\n    $.timepicker = new Timepicker(); // singleton instance\n    $.timepicker.initialized = false;\n    $.timepicker.uuid = new Date().getTime();\n    $.timepicker.version = \"0.3.3\";\n\n    // Workaround for #4055\n    // Add another global to avoid noConflict issues with inline event handlers\n    window['TP_jQuery_' + tpuuid] = $;\n\n})(jQuery);\n"],"sourceRoot":"/source/"}