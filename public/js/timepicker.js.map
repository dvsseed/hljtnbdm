{"version":3,"sources":["jquery.ui.timepicker.js"],"names":[],"mappingsfile":"timepicker.js","sourcesContent":["/*\r\n * jQuery UI Timepicker\r\n *\r\n * Copyright 2010-2013, Francois Gelinas\r\n * Dual licensed under the MIT or GPL Version 2 licenses.\r\n * http://jquery.org/license\r\n *\r\n * http://fgelinas.com/code/timepicker\r\n *\r\n * Depends:\r\n *\tjquery.ui.core.js\r\n *  jquery.ui.position.js (only if position settings are used)\r\n *\r\n * Change version 0.1.0 - moved the t-rex up here\r\n *\r\n                                                  ____\r\n       ___                                      .-~. /_\"-._\r\n      `-._~-.                                  / /_ \"~o\\  :Y\r\n          \\  \\                                / : \\~x.  ` ')\r\n           ]  Y                              /  |  Y< ~-.__j\r\n          /   !                        _.--~T : l  l<  /.-~\r\n         /   /                 ____.--~ .   ` l /~\\ \\<|Y\r\n        /   /             .-~~\"        /| .    ',-~\\ \\L|\r\n       /   /             /     .^   \\ Y~Y \\.^>/l_   \"--'\r\n      /   Y           .-\"(  .  l__  j_j l_/ /~_.-~    .\r\n     Y    l          /    \\  )    ~~~.\" / `/\"~ / \\.__/l_\r\n     |     \\     _.-\"      ~-{__     l  :  l._Z~-.___.--~\r\n     |      ~---~           /   ~~\"---\\_  ' __[>\r\n     l  .                _.^   ___     _>-y~\r\n      \\  \\     .      .-~   .-~   ~>--\"  /\r\n       \\  ~---\"            /     ./  _.-'\r\n        \"-.,_____.,_  _.--~\\     _.-~\r\n                    ~~     (   _}       -Row\r\n                           `. ~(\r\n                             )  \\\r\n                            /,`--'~\\--'~\\\r\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                             ->T-Rex<-\r\n*/\r\n\r\n(function ($) {\r\n\r\n    $.extend($.ui, { timepicker: { version: \"0.3.3\"} });\r\n\r\n    var PROP_NAME = 'timepicker',\r\n        tpuuid = new Date().getTime();\r\n\r\n    /* Time picker manager.\r\n    Use the singleton instance of this class, $.timepicker, to interact with the time picker.\r\n    Settings for (groups of) time pickers are maintained in an instance object,\r\n    allowing multiple different settings on the same page. */\r\n\r\n    function Timepicker() {\r\n        this.debug = true; // Change this to true to start debugging\r\n        this._curInst = null; // The current instance in use\r\n        this._disabledInputs = []; // List of time picker inputs that have been disabled\r\n        this._timepickerShowing = false; // True if the popup picker is showing , false if not\r\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\r\n        this._dialogClass = 'ui-timepicker-dialog'; // The name of the dialog marker class\r\n        this._mainDivId = 'ui-timepicker-div'; // The ID of the main timepicker division\r\n        this._inlineClass = 'ui-timepicker-inline'; // The name of the inline marker class\r\n        this._currentClass = 'ui-timepicker-current'; // The name of the current hour / minutes marker class\r\n        this._dayOverClass = 'ui-timepicker-days-cell-over'; // The name of the day hover marker class\r\n\r\n        this.regional = []; // Available regional settings, indexed by language code\r\n        this.regional[''] = { // Default regional settings\r\n            hourText: 'Hour',           // Display text for hours section\r\n            minuteText: 'Minute',       // Display text for minutes link\r\n            amPmText: ['AM', 'PM'],     // Display text for AM PM\r\n            closeButtonText: 'Done',        // Text for the confirmation button (ok button)\r\n            nowButtonText: 'Now',           // Text for the now button\r\n            deselectButtonText: 'Deselect'  // Text for the deselect button\r\n        };\r\n        this._defaults = { // Global defaults for all the time picker instances\r\n            showOn: 'focus',    // 'focus' for popup on focus,\r\n                                // 'button' for trigger button, or 'both' for either (not yet implemented)\r\n            button: null,                   // 'button' element that will trigger the timepicker\r\n            showAnim: 'fadeIn',             // Name of jQuery animation for popup\r\n            showOptions: {},                // Options for enhanced animations\r\n            appendText: '',                 // Display text following the input box, e.g. showing the format\r\n\r\n            beforeShow: null,               // Define a callback function executed before the timepicker is shown\r\n            onSelect: null,                 // Define a callback function when a hour / minutes is selected\r\n            onClose: null,                  // Define a callback function when the timepicker is closed\r\n\r\n            timeSeparator: ':',             // The character to use to separate hours and minutes.\r\n            periodSeparator: ' ',           // The character to use to separate the time from the time period.\r\n            showPeriod: false,              // Define whether or not to show AM/PM with selected time\r\n            showPeriodLabels: true,         // Show the AM/PM labels on the left of the time picker\r\n            showLeadingZero: true,          // Define whether or not to show a leading zero for hours < 10. [true/false]\r\n            showMinutesLeadingZero: true,   // Define whether or not to show a leading zero for minutes < 10.\r\n            altField: '',                   // Selector for an alternate field to store selected time into\r\n            defaultTime: 'now',             // Used as default time when input field is empty or for inline timePicker\r\n                                            // (set to 'now' for the current time, '' for no highlighted time)\r\n            myPosition: 'left top',         // Position of the dialog relative to the input.\r\n                                            // see the position utility for more info : http://jqueryui.com/demos/position/\r\n            atPosition: 'left bottom',      // Position of the input element to match\r\n                                            // Note : if the position utility is not loaded, the timepicker will attach left top to left bottom\r\n            //NEW: 2011-02-03\r\n            onHourShow: null,\t\t\t    // callback for enabling / disabling on selectable hours  ex : function(hour) { return true; }\r\n            onMinuteShow: null,             // callback for enabling / disabling on time selection  ex : function(hour,minute) { return true; }\r\n\r\n            hours: {\r\n                starts: 0,                  // first displayed hour\r\n                ends: 23                    // last displayed hour\r\n            },\r\n            minutes: {\r\n                starts: 0,                  // first displayed minute\r\n                ends: 55,                   // last displayed minute\r\n                interval: 5,                // interval of displayed minutes\r\n                manual: []                  // optional extra manual entries for minutes\r\n            },\r\n            rows: 4,                        // number of rows for the input tables, minimum 2, makes more sense if you use multiple of 2\r\n            // 2011-08-05 0.2.4\r\n            showHours: true,                // display the hours section of the dialog\r\n            showMinutes: true,              // display the minute section of the dialog\r\n            optionalMinutes: false,         // optionally parse inputs of whole hours with minutes omitted\r\n\r\n            // buttons\r\n            showCloseButton: false,         // shows an OK button to confirm the edit\r\n            showNowButton: false,           // Shows the 'now' button\r\n            showDeselectButton: false,       // Shows the deselect time button\r\n            \r\n            maxTime: {\r\n                hour: null,\r\n                minute: null\r\n            },\r\n            minTime: {\r\n                hour: null,\r\n                minute: null\r\n            }\r\n\t\t\t\r\n        };\r\n        $.extend(this._defaults, this.regional['']);\r\n\r\n        this.tpDiv = $('<div id=\"' + this._mainDivId + '\" class=\"ui-timepicker ui-widget ui-helper-clearfix ui-corner-all \" style=\"display: none\"></div>');\r\n    }\r\n\r\n    $.extend(Timepicker.prototype, {\r\n        /* Class name added to elements to indicate already configured with a time picker. */\r\n        markerClassName: 'hasTimepicker',\r\n\r\n        /* Debug logging (if enabled). */\r\n        log: function () {\r\n            if (this.debug)\r\n                console.log.apply('', arguments);\r\n        },\r\n\r\n        _widgetTimepicker: function () {\r\n            return this.tpDiv;\r\n        },\r\n\r\n        /* Override the default settings for all instances of the time picker.\r\n        @param  settings  object - the new settings to use as defaults (anonymous object)\r\n        @return the manager object */\r\n        setDefaults: function (settings) {\r\n            extendRemove(this._defaults, settings || {});\r\n            return this;\r\n        },\r\n\r\n        /* Attach the time picker to a jQuery selection.\r\n        @param  target    element - the target input field or division or span\r\n        @param  settings  object - the new settings to use for this time picker instance (anonymous) */\r\n        _attachTimepicker: function (target, settings) {\r\n            // check for settings on the control itself - in namespace 'time:'\r\n            var inlineSettings = null;\r\n            for (var attrName in this._defaults) {\r\n                var attrValue = target.getAttribute('time:' + attrName);\r\n                if (attrValue) {\r\n                    inlineSettings = inlineSettings || {};\r\n                    try {\r\n                        inlineSettings[attrName] = eval(attrValue);\r\n                    } catch (err) {\r\n                        inlineSettings[attrName] = attrValue;\r\n                    }\r\n                }\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            var inline = (nodeName == 'div' || nodeName == 'span');\r\n\r\n            if (!target.id) {\r\n                this.uuid += 1;\r\n                target.id = 'tp' + this.uuid;\r\n            }\r\n            var inst = this._newInst($(target), inline);\r\n            inst.settings = $.extend({}, settings || {}, inlineSettings || {});\r\n            if (nodeName == 'input') {\r\n                this._connectTimepicker(target, inst);\r\n                // init inst.hours and inst.minutes from the input value\r\n                this._setTimeFromField(inst);\r\n            } else if (inline) {\r\n                this._inlineTimepicker(target, inst);\r\n            }\r\n\r\n\r\n        },\r\n\r\n        /* Create a new instance object. */\r\n        _newInst: function (target, inline) {\r\n            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\\\\\$1'); // escape jQuery meta chars\r\n            return {\r\n                id: id, input: target, // associated target\r\n                inline: inline, // is timepicker inline or not :\r\n                tpDiv: (!inline ? this.tpDiv : // presentation div\r\n                    $('<div class=\"' + this._inlineClass + ' ui-timepicker ui-widget  ui-helper-clearfix\"></div>'))\r\n            };\r\n        },\r\n\r\n        /* Attach the time picker to an input field. */\r\n        _connectTimepicker: function (target, inst) {\r\n            var input = $(target);\r\n            inst.append = $([]);\r\n            inst.trigger = $([]);\r\n            if (input.hasClass(this.markerClassName)) { return; }\r\n            this._attachments(input, inst);\r\n            input.addClass(this.markerClassName).\r\n                keydown(this._doKeyDown).\r\n                keyup(this._doKeyUp).\r\n                bind(\"setData.timepicker\", function (event, key, value) {\r\n                    inst.settings[key] = value;\r\n                }).\r\n                bind(\"getData.timepicker\", function (event, key) {\r\n                    return this._get(inst, key);\r\n                });\r\n            $.data(target, PROP_NAME, inst);\r\n        },\r\n\r\n        /* Handle keystrokes. */\r\n        _doKeyDown: function (event) {\r\n            var inst = $.timepicker._getInst(event.target);\r\n            var handled = true;\r\n            inst._keyEvent = true;\r\n            if ($.timepicker._timepickerShowing) {\r\n                switch (event.keyCode) {\r\n                    case 9: $.timepicker._hideTimepicker();\r\n                        handled = false;\r\n                        break; // hide on tab out\r\n                    case 13:\r\n                        $.timepicker._updateSelectedValue(inst);\r\n                        $.timepicker._hideTimepicker();\r\n\r\n\t\t\t\t\t\treturn false; // don't submit the form\r\n\t\t\t\t\t\tbreak; // select the value on enter\r\n                    case 27: $.timepicker._hideTimepicker();\r\n                        break; // hide on escape\r\n                    default: handled = false;\r\n                }\r\n            }\r\n            else if (event.keyCode == 36 && event.ctrlKey) { // display the time picker on ctrl+home\r\n                $.timepicker._showTimepicker(this);\r\n            }\r\n            else {\r\n                handled = false;\r\n            }\r\n            if (handled) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n        },\r\n\r\n        /* Update selected time on keyUp */\r\n        /* Added verion 0.0.5 */\r\n        _doKeyUp: function (event) {\r\n            var inst = $.timepicker._getInst(event.target);\r\n            $.timepicker._setTimeFromField(inst);\r\n            $.timepicker._updateTimepicker(inst);\r\n        },\r\n\r\n        /* Make attachments based on settings. */\r\n        _attachments: function (input, inst) {\r\n            var appendText = this._get(inst, 'appendText');\r\n            var isRTL = this._get(inst, 'isRTL');\r\n            if (inst.append) { inst.append.remove(); }\r\n            if (appendText) {\r\n                inst.append = $('<span class=\"' + this._appendClass + '\">' + appendText + '</span>');\r\n                input[isRTL ? 'before' : 'after'](inst.append);\r\n            }\r\n            input.unbind('focus.timepicker', this._showTimepicker);\r\n            input.unbind('click.timepicker', this._adjustZIndex);\r\n\r\n            if (inst.trigger) { inst.trigger.remove(); }\r\n\r\n            var showOn = this._get(inst, 'showOn');\r\n            if (showOn == 'focus' || showOn == 'both') { // pop-up time picker when in the marked field\r\n                input.bind(\"focus.timepicker\", this._showTimepicker);\r\n                input.bind(\"click.timepicker\", this._adjustZIndex);\r\n            }\r\n            if (showOn == 'button' || showOn == 'both') { // pop-up time picker when 'button' element is clicked\r\n                var button = this._get(inst, 'button');\r\n\r\n                // Add button if button element is not set\r\n                if(button == null) {\r\n                    button = $('<button class=\"ui-timepicker-trigger\" type=\"button\">...</button>');\r\n                    input.after(button);\r\n                }\r\n\r\n                $(button).bind(\"click.timepicker\", function () {\r\n                    if ($.timepicker._timepickerShowing && $.timepicker._lastInput == input[0]) {\r\n                        $.timepicker._hideTimepicker();\r\n                    } else if (!inst.input.is(':disabled')) {\r\n                        $.timepicker._showTimepicker(input[0]);\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n            }\r\n        },\r\n\r\n\r\n        /* Attach an inline time picker to a div. */\r\n        _inlineTimepicker: function(target, inst) {\r\n            var divSpan = $(target);\r\n            if (divSpan.hasClass(this.markerClassName))\r\n                return;\r\n            divSpan.addClass(this.markerClassName).append(inst.tpDiv).\r\n                bind(\"setData.timepicker\", function(event, key, value){\r\n                    inst.settings[key] = value;\r\n                }).bind(\"getData.timepicker\", function(event, key){\r\n                    return this._get(inst, key);\r\n                });\r\n            $.data(target, PROP_NAME, inst);\r\n\r\n            this._setTimeFromField(inst);\r\n            this._updateTimepicker(inst);\r\n            inst.tpDiv.show();\r\n        },\r\n\r\n        _adjustZIndex: function(input) {\r\n            input = input.target || input;\r\n            var inst = $.timepicker._getInst(input);\r\n            inst.tpDiv.css('zIndex', $.timepicker._getZIndex(input) +1);\r\n        },\r\n\r\n        /* Pop-up the time picker for a given input field.\r\n        @param  input  element - the input field attached to the time picker or\r\n        event - if triggered by focus */\r\n        _showTimepicker: function (input) {\r\n            input = input.target || input;\r\n            if (input.nodeName.toLowerCase() != 'input') { input = $('input', input.parentNode)[0]; } // find from button/image trigger\r\n\r\n            if ($.timepicker._isDisabledTimepicker(input) || $.timepicker._lastInput == input) { return; } // already here\r\n\r\n            // fix v 0.0.8 - close current timepicker before showing another one\r\n            $.timepicker._hideTimepicker();\r\n\r\n            var inst = $.timepicker._getInst(input);\r\n            if ($.timepicker._curInst && $.timepicker._curInst != inst) {\r\n                $.timepicker._curInst.tpDiv.stop(true, true);\r\n            }\r\n            var beforeShow = $.timepicker._get(inst, 'beforeShow');\r\n            extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));\r\n            inst.lastVal = null;\r\n            $.timepicker._lastInput = input;\r\n\r\n            $.timepicker._setTimeFromField(inst);\r\n\r\n            // calculate default position\r\n            if ($.timepicker._inDialog) { input.value = ''; } // hide cursor\r\n            if (!$.timepicker._pos) { // position below input\r\n                $.timepicker._pos = $.timepicker._findPos(input);\r\n                $.timepicker._pos[1] += input.offsetHeight; // add the height\r\n            }\r\n            var isFixed = false;\r\n            $(input).parents().each(function () {\r\n                isFixed |= $(this).css('position') == 'fixed';\r\n                return !isFixed;\r\n            });\r\n\r\n            var offset = { left: $.timepicker._pos[0], top: $.timepicker._pos[1] };\r\n\r\n            $.timepicker._pos = null;\r\n            // determine sizing offscreen\r\n            inst.tpDiv.css({ position: 'absolute', display: 'block', top: '-1000px' });\r\n            $.timepicker._updateTimepicker(inst);\r\n\r\n\r\n            // position with the ui position utility, if loaded\r\n            if ( ( ! inst.inline )  && ( typeof $.ui.position == 'object' ) ) {\r\n                inst.tpDiv.position({\r\n                    of: inst.input,\r\n                    my: $.timepicker._get( inst, 'myPosition' ),\r\n                    at: $.timepicker._get( inst, 'atPosition' ),\r\n                    // offset: $( \"#offset\" ).val(),\r\n                    // using: using,\r\n                    collision: 'flip'\r\n                });\r\n                var offset = inst.tpDiv.offset();\r\n                $.timepicker._pos = [offset.top, offset.left];\r\n            }\r\n\r\n\r\n            // reset clicked state\r\n            inst._hoursClicked = false;\r\n            inst._minutesClicked = false;\r\n\r\n            // fix width for dynamic number of time pickers\r\n            // and adjust position before showing\r\n            offset = $.timepicker._checkOffset(inst, offset, isFixed);\r\n            inst.tpDiv.css({ position: ($.timepicker._inDialog && $.blockUI ?\r\n\t\t\t    'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',\r\n                left: offset.left + 'px', top: offset.top + 'px'\r\n            });\r\n            if ( ! inst.inline ) {\r\n                var showAnim = $.timepicker._get(inst, 'showAnim');\r\n                var duration = $.timepicker._get(inst, 'duration');\r\n\r\n                var postProcess = function () {\r\n                    $.timepicker._timepickerShowing = true;\r\n                    var borders = $.timepicker._getBorders(inst.tpDiv);\r\n                    inst.tpDiv.find('iframe.ui-timepicker-cover'). // IE6- only\r\n\t\t\t\t\tcss({ left: -borders[0], top: -borders[1],\r\n\t\t\t\t\t    width: inst.tpDiv.outerWidth(), height: inst.tpDiv.outerHeight()\r\n\t\t\t\t\t});\r\n                };\r\n\r\n                // Fixed the zIndex problem for real (I hope) - FG - v 0.2.9\r\n                $.timepicker._adjustZIndex(input);\r\n                //inst.tpDiv.css('zIndex', $.timepicker._getZIndex(input) +1);\r\n\r\n                if ($.effects && $.effects[showAnim]) {\r\n                    inst.tpDiv.show(showAnim, $.timepicker._get(inst, 'showOptions'), duration, postProcess);\r\n                }\r\n                else {\r\n                    inst.tpDiv.show((showAnim ? duration : null), postProcess);\r\n                }\r\n                if (!showAnim || !duration) { postProcess(); }\r\n                if (inst.input.is(':visible') && !inst.input.is(':disabled')) { inst.input.focus(); }\r\n                $.timepicker._curInst = inst;\r\n            }\r\n        },\r\n\r\n        // This is an enhanced copy of the zIndex function of UI core 1.8.?? For backward compatibility.\r\n        // Enhancement returns maximum zindex value discovered while traversing parent elements,\r\n        // rather than the first zindex value found. Ensures the timepicker popup will be in front,\r\n        // even in funky scenarios like non-jq dialog containers with large fixed zindex values and\r\n        // nested zindex-influenced elements of their own.\r\n        _getZIndex: function (target) {\r\n            var elem = $(target);\r\n            var maxValue = 0;\r\n            var position, value;\r\n            while (elem.length && elem[0] !== document) {\r\n                position = elem.css(\"position\");\r\n                if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\r\n                    value = parseInt(elem.css(\"zIndex\"), 10);\r\n                    if (!isNaN(value) && value !== 0) {\r\n                        if (value > maxValue) { maxValue = value; }\r\n                    }\r\n                }\r\n                elem = elem.parent();\r\n            }\r\n\r\n            return maxValue;\r\n        },\r\n\r\n        /* Refresh the time picker\r\n           @param   target  element - The target input field or inline container element. */\r\n        _refreshTimepicker: function(target) {\r\n            var inst = this._getInst(target);\r\n            if (inst) {\r\n                this._updateTimepicker(inst);\r\n            }\r\n        },\r\n\r\n\r\n        /* Generate the time picker content. */\r\n        _updateTimepicker: function (inst) {\r\n            inst.tpDiv.empty().append(this._generateHTML(inst));\r\n            this._rebindDialogEvents(inst);\r\n\r\n        },\r\n\r\n        _rebindDialogEvents: function (inst) {\r\n            var borders = $.timepicker._getBorders(inst.tpDiv),\r\n                self = this;\r\n            inst.tpDiv\r\n\t\t\t.find('iframe.ui-timepicker-cover') // IE6- only\r\n\t\t\t\t.css({ left: -borders[0], top: -borders[1],\r\n\t\t\t\t    width: inst.tpDiv.outerWidth(), height: inst.tpDiv.outerHeight()\r\n\t\t\t\t})\r\n\t\t\t.end()\r\n            // after the picker html is appended bind the click & double click events (faster in IE this way\r\n            // then letting the browser interpret the inline events)\r\n            // the binding for the minute cells also exists in _updateMinuteDisplay\r\n            .find('.ui-timepicker-minute-cell')\r\n                .unbind()\r\n                .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectMinutes, this))\r\n                .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectMinutes, this))\r\n            .end()\r\n            .find('.ui-timepicker-hour-cell')\r\n                .unbind()\r\n                .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectHours, this))\r\n                .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectHours, this))\r\n            .end()\r\n\t\t\t.find('.ui-timepicker td a')\r\n                .unbind()\r\n\t\t\t\t.bind('mouseout', function () {\r\n\t\t\t\t    $(this).removeClass('ui-state-hover');\r\n\t\t\t\t    if (this.className.indexOf('ui-timepicker-prev') != -1) $(this).removeClass('ui-timepicker-prev-hover');\r\n\t\t\t\t    if (this.className.indexOf('ui-timepicker-next') != -1) $(this).removeClass('ui-timepicker-next-hover');\r\n\t\t\t\t})\r\n\t\t\t\t.bind('mouseover', function () {\r\n\t\t\t\t    if ( ! self._isDisabledTimepicker(inst.inline ? inst.tpDiv.parent()[0] : inst.input[0])) {\r\n\t\t\t\t        $(this).parents('.ui-timepicker-calendar').find('a').removeClass('ui-state-hover');\r\n\t\t\t\t        $(this).addClass('ui-state-hover');\r\n\t\t\t\t        if (this.className.indexOf('ui-timepicker-prev') != -1) $(this).addClass('ui-timepicker-prev-hover');\r\n\t\t\t\t        if (this.className.indexOf('ui-timepicker-next') != -1) $(this).addClass('ui-timepicker-next-hover');\r\n\t\t\t\t    }\r\n\t\t\t\t})\r\n\t\t\t.end()\r\n\t\t\t.find('.' + this._dayOverClass + ' a')\r\n\t\t\t\t.trigger('mouseover')\r\n\t\t\t.end()\r\n            .find('.ui-timepicker-now').bind(\"click\", function(e) {\r\n                    $.timepicker.selectNow(e);\r\n            }).end()\r\n            .find('.ui-timepicker-deselect').bind(\"click\",function(e) {\r\n                    $.timepicker.deselectTime(e);\r\n            }).end()\r\n            .find('.ui-timepicker-close').bind(\"click\",function(e) {\r\n                    $.timepicker._hideTimepicker();\r\n            }).end();\r\n        },\r\n\r\n        /* Generate the HTML for the current state of the time picker. */\r\n        _generateHTML: function (inst) {\r\n\r\n            var h, m, row, col, html, hoursHtml, minutesHtml = '',\r\n                showPeriod = (this._get(inst, 'showPeriod') == true),\r\n                showPeriodLabels = (this._get(inst, 'showPeriodLabels') == true),\r\n                showLeadingZero = (this._get(inst, 'showLeadingZero') == true),\r\n                showHours = (this._get(inst, 'showHours') == true),\r\n                showMinutes = (this._get(inst, 'showMinutes') == true),\r\n                amPmText = this._get(inst, 'amPmText'),\r\n                rows = this._get(inst, 'rows'),\r\n                amRows = 0,\r\n                pmRows = 0,\r\n                amItems = 0,\r\n                pmItems = 0,\r\n                amFirstRow = 0,\r\n                pmFirstRow = 0,\r\n                hours = Array(),\r\n                hours_options = this._get(inst, 'hours'),\r\n                hoursPerRow = null,\r\n                hourCounter = 0,\r\n                hourLabel = this._get(inst, 'hourText'),\r\n                showCloseButton = this._get(inst, 'showCloseButton'),\r\n                closeButtonText = this._get(inst, 'closeButtonText'),\r\n                showNowButton = this._get(inst, 'showNowButton'),\r\n                nowButtonText = this._get(inst, 'nowButtonText'),\r\n                showDeselectButton = this._get(inst, 'showDeselectButton'),\r\n                deselectButtonText = this._get(inst, 'deselectButtonText'),\r\n                showButtonPanel = showCloseButton || showNowButton || showDeselectButton;\r\n\r\n\r\n\r\n            // prepare all hours and minutes, makes it easier to distribute by rows\r\n            for (h = hours_options.starts; h <= hours_options.ends; h++) {\r\n                hours.push (h);\r\n            }\r\n            hoursPerRow = Math.ceil(hours.length / rows); // always round up\r\n\r\n            if (showPeriodLabels) {\r\n                for (hourCounter = 0; hourCounter < hours.length; hourCounter++) {\r\n                    if (hours[hourCounter] < 12) {\r\n                        amItems++;\r\n                    }\r\n                    else {\r\n                        pmItems++;\r\n                    }\r\n                }\r\n                hourCounter = 0;\r\n\r\n                amRows = Math.floor(amItems / hours.length * rows);\r\n                pmRows = Math.floor(pmItems / hours.length * rows);\r\n\r\n                // assign the extra row to the period that is more densely populated\r\n                if (rows != amRows + pmRows) {\r\n                    // Make sure: AM Has Items and either PM Does Not, AM has no rows yet, or AM is more dense\r\n                    if (amItems && (!pmItems || !amRows || (pmRows && amItems / amRows >= pmItems / pmRows))) {\r\n                        amRows++;\r\n                    } else {\r\n                        pmRows++;\r\n                    }\r\n                }\r\n                amFirstRow = Math.min(amRows, 1);\r\n                pmFirstRow = amRows + 1;\r\n\r\n                if (amRows == 0) {\r\n                    hoursPerRow = Math.ceil(pmItems / pmRows);\r\n                } else if (pmRows == 0) {\r\n                    hoursPerRow = Math.ceil(amItems / amRows);\r\n                } else {\r\n                    hoursPerRow = Math.ceil(Math.max(amItems / amRows, pmItems / pmRows));\r\n                }\r\n            }\r\n\r\n\r\n            html = '<table class=\"ui-timepicker-table ui-widget-content ui-corner-all\"><tr>';\r\n\r\n            if (showHours) {\r\n\r\n                html += '<td class=\"ui-timepicker-hours\">' +\r\n                        '<div class=\"ui-timepicker-title ui-widget-header ui-helper-clearfix ui-corner-all\">' +\r\n                        hourLabel +\r\n                        '</div>' +\r\n                        '<table class=\"ui-timepicker\">';\r\n\r\n                for (row = 1; row <= rows; row++) {\r\n                    html += '<tr>';\r\n                    // AM\r\n                    if (row == amFirstRow && showPeriodLabels) {\r\n                        html += '<th rowspan=\"' + amRows.toString() + '\" class=\"periods\" scope=\"row\">' + amPmText[0] + '</th>';\r\n                    }\r\n                    // PM\r\n                    if (row == pmFirstRow && showPeriodLabels) {\r\n                        html += '<th rowspan=\"' + pmRows.toString() + '\" class=\"periods\" scope=\"row\">' + amPmText[1] + '</th>';\r\n                    }\r\n                    for (col = 1; col <= hoursPerRow; col++) {\r\n                        if (showPeriodLabels && row < pmFirstRow && hours[hourCounter] >= 12) {\r\n                            html += this._generateHTMLHourCell(inst, undefined, showPeriod, showLeadingZero);\r\n                        } else {\r\n                            html += this._generateHTMLHourCell(inst, hours[hourCounter], showPeriod, showLeadingZero);\r\n                            hourCounter++;\r\n                        }\r\n                    }\r\n                    html += '</tr>';\r\n                }\r\n                html += '</table>' + // Close the hours cells table\r\n                        '</td>'; // Close the Hour td\r\n            }\r\n\r\n            if (showMinutes) {\r\n                html += '<td class=\"ui-timepicker-minutes\">';\r\n                html += this._generateHTMLMinutes(inst);\r\n                html += '</td>';\r\n            }\r\n\r\n            html += '</tr>';\r\n\r\n\r\n            if (showButtonPanel) {\r\n                var buttonPanel = '<tr><td colspan=\"3\"><div class=\"ui-timepicker-buttonpane ui-widget-content\">';\r\n                if (showNowButton) {\r\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-now ui-state-default ui-corner-all\" '\r\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\r\n                                   + nowButtonText + '</button>';\r\n                }\r\n                if (showDeselectButton) {\r\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-deselect ui-state-default ui-corner-all\" '\r\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\r\n                                   + deselectButtonText + '</button>';\r\n                }\r\n                if (showCloseButton) {\r\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-close ui-state-default ui-corner-all\" '\r\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\r\n                                   + closeButtonText + '</button>';\r\n                }\r\n\r\n                html += buttonPanel + '</div></td></tr>';\r\n            }\r\n            html += '</table>';\r\n\r\n            return html;\r\n        },\r\n\r\n        /* Special function that update the minutes selection in currently visible timepicker\r\n         * called on hour selection when onMinuteShow is defined  */\r\n        _updateMinuteDisplay: function (inst) {\r\n            var newHtml = this._generateHTMLMinutes(inst);\r\n            inst.tpDiv.find('td.ui-timepicker-minutes').html(newHtml);\r\n            this._rebindDialogEvents(inst);\r\n                // after the picker html is appended bind the click & double click events (faster in IE this way\r\n                // then letting the browser interpret the inline events)\r\n                // yes I know, duplicate code, sorry\r\n/*                .find('.ui-timepicker-minute-cell')\r\n                    .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectMinutes, this))\r\n                    .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectMinutes, this));\r\n*/\r\n\r\n        },\r\n\r\n        /*\r\n         * Generate the minutes table\r\n         * This is separated from the _generateHTML function because is can be called separately (when hours changes)\r\n         */\r\n        _generateHTMLMinutes: function (inst) {\r\n\r\n            var m, row, html = '',\r\n                rows = this._get(inst, 'rows'),\r\n                minutes = Array(),\r\n                minutes_options = this._get(inst, 'minutes'),\r\n                minutesPerRow = null,\r\n                minuteCounter = 0,\r\n                showMinutesLeadingZero = (this._get(inst, 'showMinutesLeadingZero') == true),\r\n                onMinuteShow = this._get(inst, 'onMinuteShow'),\r\n                minuteLabel = this._get(inst, 'minuteText');\r\n\r\n            if ( ! minutes_options.starts) {\r\n                minutes_options.starts = 0;\r\n            }\r\n            if ( ! minutes_options.ends) {\r\n                minutes_options.ends = 59;\r\n            }\r\n            if ( ! minutes_options.manual) {\r\n                minutes_options.manual = [];\r\n            }\r\n            for (m = minutes_options.starts; m <= minutes_options.ends; m += minutes_options.interval) {\r\n                minutes.push(m);\r\n            }\r\n            for (i = 0; i < minutes_options.manual.length;i++) {\r\n                var currMin = minutes_options.manual[i];\r\n\r\n                // Validate & filter duplicates of manual minute input\r\n                if (typeof currMin != 'number' || currMin < 0 || currMin > 59 || $.inArray(currMin, minutes) >= 0) {\r\n                    continue;\r\n                }\r\n                minutes.push(currMin);\r\n            }\r\n\r\n            // Sort to get correct order after adding manual minutes\r\n            // Use compare function to sort by number, instead of string (default)\r\n            minutes.sort(function(a, b) {\r\n                return a-b;\r\n            });\r\n\r\n            minutesPerRow = Math.round(minutes.length / rows + 0.49); // always round up\r\n\r\n            /*\r\n             * The minutes table\r\n             */\r\n            // if currently selected minute is not enabled, we have a problem and need to select a new minute.\r\n            if (onMinuteShow &&\r\n                (onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours , inst.minutes]) == false) ) {\r\n                // loop minutes and select first available\r\n                for (minuteCounter = 0; minuteCounter < minutes.length; minuteCounter += 1) {\r\n                    m = minutes[minuteCounter];\r\n                    if (onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours, m])) {\r\n                        inst.minutes = m;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n\r\n            html += '<div class=\"ui-timepicker-title ui-widget-header ui-helper-clearfix ui-corner-all\">' +\r\n                    minuteLabel +\r\n                    '</div>' +\r\n                    '<table class=\"ui-timepicker\">';\r\n\r\n            minuteCounter = 0;\r\n            for (row = 1; row <= rows; row++) {\r\n                html += '<tr>';\r\n                while (minuteCounter < row * minutesPerRow) {\r\n                    var m = minutes[minuteCounter];\r\n                    var displayText = '';\r\n                    if (m !== undefined ) {\r\n                        displayText = (m < 10) && showMinutesLeadingZero ? \"0\" + m.toString() : m.toString();\r\n                    }\r\n                    html += this._generateHTMLMinuteCell(inst, m, displayText);\r\n                    minuteCounter++;\r\n                }\r\n                html += '</tr>';\r\n            }\r\n\r\n            html += '</table>';\r\n\r\n            return html;\r\n        },\r\n\r\n        /* Generate the content of a \"Hour\" cell */\r\n        _generateHTMLHourCell: function (inst, hour, showPeriod, showLeadingZero) {\r\n\r\n            var displayHour = hour;\r\n            if ((hour > 12) && showPeriod) {\r\n                displayHour = hour - 12;\r\n            }\r\n            if ((displayHour == 0) && showPeriod) {\r\n                displayHour = 12;\r\n            }\r\n            if ((displayHour < 10) && showLeadingZero) {\r\n                displayHour = '0' + displayHour;\r\n            }\r\n\r\n            var html = \"\";\r\n            var enabled = true;\r\n            var onHourShow = this._get(inst, 'onHourShow');\t\t//custom callback\r\n            var maxTime = this._get(inst, 'maxTime');\r\n            var minTime = this._get(inst, 'minTime');\r\n\r\n            if (hour == undefined) {\r\n                html = '<td><span class=\"ui-state-default ui-state-disabled\">&nbsp;</span></td>';\r\n                return html;\r\n            }\r\n\r\n            if (onHourShow) {\r\n            \tenabled = onHourShow.apply((inst.input ? inst.input[0] : null), [hour]);\r\n            }\r\n\t\t\t\r\n            if (enabled) {\r\n                if ( !isNaN(parseInt(maxTime.hour)) && hour > maxTime.hour ) enabled = false;\r\n                if ( !isNaN(parseInt(minTime.hour)) && hour < minTime.hour ) enabled = false;\r\n            }\r\n\t\t\t\r\n            if (enabled) {\r\n                html = '<td class=\"ui-timepicker-hour-cell\" data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" data-hour=\"' + hour.toString() + '\">' +\r\n                   '<a class=\"ui-state-default ' +\r\n                   (hour == inst.hours ? 'ui-state-active' : '') +\r\n                   '\">' +\r\n                   displayHour.toString() +\r\n                   '</a></td>';\r\n            }\r\n            else {\r\n            \thtml =\r\n            \t\t'<td>' +\r\n\t\t                '<span class=\"ui-state-default ui-state-disabled ' +\r\n\t\t                (hour == inst.hours ? ' ui-state-active ' : ' ') +\r\n\t\t                '\">' +\r\n\t\t                displayHour.toString() +\r\n\t\t                '</span>' +\r\n\t\t            '</td>';\r\n            }\r\n            return html;\r\n        },\r\n\r\n        /* Generate the content of a \"Hour\" cell */\r\n        _generateHTMLMinuteCell: function (inst, minute, displayText) {\r\n             var html = \"\";\r\n             var enabled = true;\r\n             var hour = inst.hours;\r\n             var onMinuteShow = this._get(inst, 'onMinuteShow');\t\t//custom callback\r\n             var maxTime = this._get(inst, 'maxTime');\r\n             var minTime = this._get(inst, 'minTime');\r\n\r\n             if (onMinuteShow) {\r\n            \t //NEW: 2011-02-03  we should give the hour as a parameter as well!\r\n             \tenabled = onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours,minute]);\t\t//trigger callback\r\n             }\r\n\r\n             if (minute == undefined) {\r\n                 html = '<td><span class=\"ui-state-default ui-state-disabled\">&nbsp;</span></td>';\r\n                 return html;\r\n             }\r\n\r\n            if (enabled && hour !== null) {\r\n                if ( !isNaN(parseInt(maxTime.hour)) && !isNaN(parseInt(maxTime.minute)) && hour >= maxTime.hour && minute > maxTime.minute ) enabled = false;\r\n                if ( !isNaN(parseInt(minTime.hour)) && !isNaN(parseInt(minTime.minute)) && hour <= minTime.hour && minute < minTime.minute ) enabled = false;\r\n            }\r\n\t\t\t\r\n             if (enabled) {\r\n\t             html = '<td class=\"ui-timepicker-minute-cell\" data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" data-minute=\"' + minute.toString() + '\" >' +\r\n\t                   '<a class=\"ui-state-default ' +\r\n\t                   (minute == inst.minutes ? 'ui-state-active' : '') +\r\n\t                   '\" >' +\r\n\t                   displayText +\r\n\t                   '</a></td>';\r\n             }\r\n             else {\r\n\r\n            \thtml = '<td>' +\r\n\t                 '<span class=\"ui-state-default ui-state-disabled\" >' +\r\n\t                 \tdisplayText +\r\n\t                 '</span>' +\r\n                 '</td>';\r\n             }\r\n             return html;\r\n        },\r\n\r\n\r\n        /* Detach a timepicker from its control.\r\n           @param  target    element - the target input field or division or span */\r\n        _destroyTimepicker: function(target) {\r\n            var $target = $(target);\r\n            var inst = $.data(target, PROP_NAME);\r\n            if (!$target.hasClass(this.markerClassName)) {\r\n                return;\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            $.removeData(target, PROP_NAME);\r\n            if (nodeName == 'input') {\r\n                inst.append.remove();\r\n                inst.trigger.remove();\r\n                $target.removeClass(this.markerClassName)\r\n                    .unbind('focus.timepicker', this._showTimepicker)\r\n                    .unbind('click.timepicker', this._adjustZIndex);\r\n            } else if (nodeName == 'div' || nodeName == 'span')\r\n                $target.removeClass(this.markerClassName).empty();\r\n        },\r\n\r\n        /* Enable the date picker to a jQuery selection.\r\n           @param  target    element - the target input field or division or span */\r\n        _enableTimepicker: function(target) {\r\n            var $target = $(target),\r\n                target_id = $target.attr('id'),\r\n                inst = $.data(target, PROP_NAME);\r\n\r\n            if (!$target.hasClass(this.markerClassName)) {\r\n                return;\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            if (nodeName == 'input') {\r\n                target.disabled = false;\r\n                var button = this._get(inst, 'button');\r\n                $(button).removeClass('ui-state-disabled').disabled = false;\r\n                inst.trigger.filter('button').\r\n                    each(function() { this.disabled = false; }).end();\r\n            }\r\n            else if (nodeName == 'div' || nodeName == 'span') {\r\n                var inline = $target.children('.' + this._inlineClass);\r\n                inline.children().removeClass('ui-state-disabled');\r\n                inline.find('button').each(\r\n                    function() { this.disabled = false }\r\n                )\r\n            }\r\n            this._disabledInputs = $.map(this._disabledInputs,\r\n                function(value) { return (value == target_id ? null : value); }); // delete entry\r\n        },\r\n\r\n        /* Disable the time picker to a jQuery selection.\r\n           @param  target    element - the target input field or division or span */\r\n        _disableTimepicker: function(target) {\r\n            var $target = $(target);\r\n            var inst = $.data(target, PROP_NAME);\r\n            if (!$target.hasClass(this.markerClassName)) {\r\n                return;\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            if (nodeName == 'input') {\r\n                var button = this._get(inst, 'button');\r\n\r\n                $(button).addClass('ui-state-disabled').disabled = true;\r\n                target.disabled = true;\r\n\r\n                inst.trigger.filter('button').\r\n                    each(function() { this.disabled = true; }).end();\r\n\r\n            }\r\n            else if (nodeName == 'div' || nodeName == 'span') {\r\n                var inline = $target.children('.' + this._inlineClass);\r\n                inline.children().addClass('ui-state-disabled');\r\n                inline.find('button').each(\r\n                    function() { this.disabled = true }\r\n                )\r\n\r\n            }\r\n            this._disabledInputs = $.map(this._disabledInputs,\r\n                function(value) { return (value == target ? null : value); }); // delete entry\r\n            this._disabledInputs[this._disabledInputs.length] = $target.attr('id');\r\n        },\r\n\r\n        /* Is the first field in a jQuery collection disabled as a timepicker?\r\n        @param  target_id element - the target input field or division or span\r\n        @return boolean - true if disabled, false if enabled */\r\n        _isDisabledTimepicker: function (target_id) {\r\n            if ( ! target_id) { return false; }\r\n            for (var i = 0; i < this._disabledInputs.length; i++) {\r\n                if (this._disabledInputs[i] == target_id) { return true; }\r\n            }\r\n            return false;\r\n        },\r\n\r\n        /* Check positioning to remain on screen. */\r\n        _checkOffset: function (inst, offset, isFixed) {\r\n            var tpWidth = inst.tpDiv.outerWidth();\r\n            var tpHeight = inst.tpDiv.outerHeight();\r\n            var inputWidth = inst.input ? inst.input.outerWidth() : 0;\r\n            var inputHeight = inst.input ? inst.input.outerHeight() : 0;\r\n            var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();\r\n            var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();\r\n\r\n            offset.left -= (this._get(inst, 'isRTL') ? (tpWidth - inputWidth) : 0);\r\n            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;\r\n            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;\r\n\r\n            // now check if timepicker is showing outside window viewport - move to a better place if so.\r\n            offset.left -= Math.min(offset.left, (offset.left + tpWidth > viewWidth && viewWidth > tpWidth) ?\r\n\t\t\tMath.abs(offset.left + tpWidth - viewWidth) : 0);\r\n            offset.top -= Math.min(offset.top, (offset.top + tpHeight > viewHeight && viewHeight > tpHeight) ?\r\n\t\t\tMath.abs(tpHeight + inputHeight) : 0);\r\n\r\n            return offset;\r\n        },\r\n\r\n        /* Find an object's position on the screen. */\r\n        _findPos: function (obj) {\r\n            var inst = this._getInst(obj);\r\n            var isRTL = this._get(inst, 'isRTL');\r\n            while (obj && (obj.type == 'hidden' || obj.nodeType != 1)) {\r\n                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];\r\n            }\r\n            var position = $(obj).offset();\r\n            return [position.left, position.top];\r\n        },\r\n\r\n        /* Retrieve the size of left and top borders for an element.\r\n        @param  elem  (jQuery object) the element of interest\r\n        @return  (number[2]) the left and top borders */\r\n        _getBorders: function (elem) {\r\n            var convert = function (value) {\r\n                return { thin: 1, medium: 2, thick: 3}[value] || value;\r\n            };\r\n            return [parseFloat(convert(elem.css('border-left-width'))),\r\n\t\t\tparseFloat(convert(elem.css('border-top-width')))];\r\n        },\r\n\r\n\r\n        /* Close time picker if clicked elsewhere. */\r\n        _checkExternalClick: function (event) {\r\n            if (!$.timepicker._curInst) { return; }\r\n            var $target = $(event.target);\r\n            if ($target[0].id != $.timepicker._mainDivId &&\r\n\t\t\t\t$target.parents('#' + $.timepicker._mainDivId).length == 0 &&\r\n\t\t\t\t!$target.hasClass($.timepicker.markerClassName) &&\r\n\t\t\t\t!$target.hasClass($.timepicker._triggerClass) &&\r\n\t\t\t\t$.timepicker._timepickerShowing && !($.timepicker._inDialog && $.blockUI))\r\n                $.timepicker._hideTimepicker();\r\n        },\r\n\r\n        /* Hide the time picker from view.\r\n        @param  input  element - the input field attached to the time picker */\r\n        _hideTimepicker: function (input) {\r\n            var inst = this._curInst;\r\n            if (!inst || (input && inst != $.data(input, PROP_NAME))) { return; }\r\n            if (this._timepickerShowing) {\r\n                var showAnim = this._get(inst, 'showAnim');\r\n                var duration = this._get(inst, 'duration');\r\n                var postProcess = function () {\r\n                    $.timepicker._tidyDialog(inst);\r\n                    this._curInst = null;\r\n                };\r\n                if ($.effects && $.effects[showAnim]) {\r\n                    inst.tpDiv.hide(showAnim, $.timepicker._get(inst, 'showOptions'), duration, postProcess);\r\n                }\r\n                else {\r\n                    inst.tpDiv[(showAnim == 'slideDown' ? 'slideUp' :\r\n\t\t\t\t\t    (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);\r\n                }\r\n                if (!showAnim) { postProcess(); }\r\n\r\n                this._timepickerShowing = false;\r\n\r\n                this._lastInput = null;\r\n                if (this._inDialog) {\r\n                    this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });\r\n                    if ($.blockUI) {\r\n                        $.unblockUI();\r\n                        $('body').append(this.tpDiv);\r\n                    }\r\n                }\r\n                this._inDialog = false;\r\n\r\n                var onClose = this._get(inst, 'onClose');\r\n                 if (onClose) {\r\n                     onClose.apply(\r\n                         (inst.input ? inst.input[0] : null),\r\n \t\t\t\t\t    [(inst.input ? inst.input.val() : ''), inst]);  // trigger custom callback\r\n                 }\r\n\r\n            }\r\n        },\r\n\r\n\r\n\r\n        /* Tidy up after a dialog display. */\r\n        _tidyDialog: function (inst) {\r\n            inst.tpDiv.removeClass(this._dialogClass).unbind('.ui-timepicker');\r\n        },\r\n\r\n        /* Retrieve the instance data for the target control.\r\n        @param  target  element - the target input field or division or span\r\n        @return  object - the associated instance data\r\n        @throws  error if a jQuery problem getting data */\r\n        _getInst: function (target) {\r\n            try {\r\n                return $.data(target, PROP_NAME);\r\n            }\r\n            catch (err) {\r\n                throw 'Missing instance data for this timepicker';\r\n            }\r\n        },\r\n\r\n        /* Get a setting value, defaulting if necessary. */\r\n        _get: function (inst, name) {\r\n            return inst.settings[name] !== undefined ?\r\n\t\t\tinst.settings[name] : this._defaults[name];\r\n        },\r\n\r\n        /* Parse existing time and initialise time picker. */\r\n        _setTimeFromField: function (inst) {\r\n            if (inst.input.val() == inst.lastVal) { return; }\r\n            var defaultTime = this._get(inst, 'defaultTime');\r\n\r\n            var timeToParse = defaultTime == 'now' ? this._getCurrentTimeRounded(inst) : defaultTime;\r\n            if ((inst.inline == false) && (inst.input.val() != '')) { timeToParse = inst.input.val() }\r\n\r\n            if (timeToParse instanceof Date) {\r\n                inst.hours = timeToParse.getHours();\r\n                inst.minutes = timeToParse.getMinutes();\r\n            } else {\r\n                var timeVal = inst.lastVal = timeToParse;\r\n                if (timeToParse == '') {\r\n                    inst.hours = -1;\r\n                    inst.minutes = -1;\r\n                } else {\r\n                    var time = this.parseTime(inst, timeVal);\r\n                    inst.hours = time.hours;\r\n                    inst.minutes = time.minutes;\r\n                }\r\n            }\r\n\r\n\r\n            $.timepicker._updateTimepicker(inst);\r\n        },\r\n\r\n        /* Update or retrieve the settings for an existing time picker.\r\n           @param  target  element - the target input field or division or span\r\n           @param  name    object - the new settings to update or\r\n                           string - the name of the setting to change or retrieve,\r\n                           when retrieving also 'all' for all instance settings or\r\n                           'defaults' for all global defaults\r\n           @param  value   any - the new value for the setting\r\n                       (omit if above is an object or to retrieve a value) */\r\n        _optionTimepicker: function(target, name, value) {\r\n            var inst = this._getInst(target);\r\n            if (arguments.length == 2 && typeof name == 'string') {\r\n                return (name == 'defaults' ? $.extend({}, $.timepicker._defaults) :\r\n                    (inst ? (name == 'all' ? $.extend({}, inst.settings) :\r\n                    this._get(inst, name)) : null));\r\n            }\r\n            var settings = name || {};\r\n            if (typeof name == 'string') {\r\n                settings = {};\r\n                settings[name] = value;\r\n            }\r\n            if (inst) {\r\n                extendRemove(inst.settings, settings);\r\n                if (this._curInst == inst) {\r\n                    this._hideTimepicker();\r\n                \tthis._updateTimepicker(inst);\r\n                }\r\n                if (inst.inline) {\r\n                    this._updateTimepicker(inst);\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        /* Set the time for a jQuery selection.\r\n\t    @param  target  element - the target input field or division or span\r\n\t    @param  time    String - the new time */\r\n\t    _setTimeTimepicker: function(target, time) {\r\n\t\t    var inst = this._getInst(target);\r\n\t\t    if (inst) {\r\n\t\t\t    this._setTime(inst, time);\r\n    \t\t\tthis._updateTimepicker(inst);\r\n\t    \t\tthis._updateAlternate(inst, time);\r\n\t\t    }\r\n\t    },\r\n\r\n        /* Set the time directly. */\r\n        _setTime: function(inst, time, noChange) {\r\n            var origHours = inst.hours;\r\n            var origMinutes = inst.minutes;\r\n            if (time instanceof Date) {\r\n                inst.hours = time.getHours();\r\n                inst.minutes = time.getMinutes();\r\n            } else {\r\n                var time = this.parseTime(inst, time);\r\n                inst.hours = time.hours;\r\n                inst.minutes = time.minutes;\r\n            }\r\n\r\n            if ((origHours != inst.hours || origMinutes != inst.minutes) && !noChange) {\r\n                inst.input.trigger('change');\r\n            }\r\n            this._updateTimepicker(inst);\r\n            this._updateSelectedValue(inst);\r\n        },\r\n\r\n        /* Return the current time, ready to be parsed, rounded to the closest minute by interval */\r\n        _getCurrentTimeRounded: function (inst) {\r\n            var currentTime = new Date(),\r\n                currentMinutes = currentTime.getMinutes(),\r\n                minutes_options = this._get(inst, 'minutes'),\r\n                // round to closest interval\r\n                adjustedMinutes = Math.round(currentMinutes / minutes_options.interval) * minutes_options.interval;\r\n            currentTime.setMinutes(adjustedMinutes);\r\n            return currentTime;\r\n        },\r\n\r\n        /*\r\n        * Parse a time string into hours and minutes\r\n        */\r\n        parseTime: function (inst, timeVal) {\r\n            var retVal = new Object();\r\n            retVal.hours = -1;\r\n            retVal.minutes = -1;\r\n\r\n            if(!timeVal)\r\n                return '';\r\n\r\n            var timeSeparator = this._get(inst, 'timeSeparator'),\r\n                amPmText = this._get(inst, 'amPmText'),\r\n                showHours = this._get(inst, 'showHours'),\r\n                showMinutes = this._get(inst, 'showMinutes'),\r\n                optionalMinutes = this._get(inst, 'optionalMinutes'),\r\n                showPeriod = (this._get(inst, 'showPeriod') == true),\r\n                p = timeVal.indexOf(timeSeparator);\r\n\r\n            // check if time separator found\r\n            if (p != -1) {\r\n                retVal.hours = parseInt(timeVal.substr(0, p), 10);\r\n                retVal.minutes = parseInt(timeVal.substr(p + 1), 10);\r\n            }\r\n            // check for hours only\r\n            else if ( (showHours) && ( !showMinutes || optionalMinutes ) ) {\r\n                retVal.hours = parseInt(timeVal, 10);\r\n            }\r\n            // check for minutes only\r\n            else if ( ( ! showHours) && (showMinutes) ) {\r\n                retVal.minutes = parseInt(timeVal, 10);\r\n            }\r\n\r\n            if (showHours) {\r\n                var timeValUpper = timeVal.toUpperCase();\r\n                if ((retVal.hours < 12) && (showPeriod) && (timeValUpper.indexOf(amPmText[1].toUpperCase()) != -1)) {\r\n                    retVal.hours += 12;\r\n                }\r\n                // fix for 12 AM\r\n                if ((retVal.hours == 12) && (showPeriod) && (timeValUpper.indexOf(amPmText[0].toUpperCase()) != -1)) {\r\n                    retVal.hours = 0;\r\n                }\r\n            }\r\n\r\n            return retVal;\r\n        },\r\n\r\n        selectNow: function(event) {\r\n            var id = $(event.target).attr(\"data-timepicker-instance-id\"),\r\n                $target = $(id),\r\n                inst = this._getInst($target[0]);\r\n            //if (!inst || (input && inst != $.data(input, PROP_NAME))) { return; }\r\n            var currentTime = new Date();\r\n            inst.hours = currentTime.getHours();\r\n            inst.minutes = currentTime.getMinutes();\r\n            this._updateSelectedValue(inst);\r\n            this._updateTimepicker(inst);\r\n            this._hideTimepicker();\r\n        },\r\n\r\n        deselectTime: function(event) {\r\n            var id = $(event.target).attr(\"data-timepicker-instance-id\"),\r\n                $target = $(id),\r\n                inst = this._getInst($target[0]);\r\n            inst.hours = -1;\r\n            inst.minutes = -1;\r\n            this._updateSelectedValue(inst);\r\n            this._hideTimepicker();\r\n        },\r\n\r\n\r\n        selectHours: function (event) {\r\n            var $td = $(event.currentTarget),\r\n                id = $td.attr(\"data-timepicker-instance-id\"),\r\n                newHours = parseInt($td.attr(\"data-hour\")),\r\n                fromDoubleClick = event.data.fromDoubleClick,\r\n                $target = $(id),\r\n                inst = this._getInst($target[0]),\r\n                showMinutes = (this._get(inst, 'showMinutes') == true);\r\n\r\n            // don't select if disabled\r\n            if ( $.timepicker._isDisabledTimepicker($target.attr('id')) ) { return false }\r\n\r\n            $td.parents('.ui-timepicker-hours:first').find('a').removeClass('ui-state-active');\r\n            $td.children('a').addClass('ui-state-active');\r\n            inst.hours = newHours;\r\n\r\n            // added for onMinuteShow callback\r\n            var onMinuteShow = this._get(inst, 'onMinuteShow'),\r\n                maxTime = this._get(inst, 'maxTime'),\r\n                minTime = this._get(inst, 'minTime');\r\n            if (onMinuteShow || maxTime.minute || minTime.minute) {\r\n                // this will trigger a callback on selected hour to make sure selected minute is allowed. \r\n                this._updateMinuteDisplay(inst);\r\n            }\r\n\r\n            this._updateSelectedValue(inst);\r\n\r\n            inst._hoursClicked = true;\r\n            if ((inst._minutesClicked) || (fromDoubleClick) || (showMinutes == false)) {\r\n                $.timepicker._hideTimepicker();\r\n            }\r\n            // return false because if used inline, prevent the url to change to a hashtag\r\n            return false;\r\n        },\r\n\r\n        selectMinutes: function (event) {\r\n            var $td = $(event.currentTarget),\r\n                id = $td.attr(\"data-timepicker-instance-id\"),\r\n                newMinutes = parseInt($td.attr(\"data-minute\")),\r\n                fromDoubleClick = event.data.fromDoubleClick,\r\n                $target = $(id),\r\n                inst = this._getInst($target[0]),\r\n                showHours = (this._get(inst, 'showHours') == true);\r\n\r\n            // don't select if disabled\r\n            if ( $.timepicker._isDisabledTimepicker($target.attr('id')) ) { return false }\r\n\r\n            $td.parents('.ui-timepicker-minutes:first').find('a').removeClass('ui-state-active');\r\n            $td.children('a').addClass('ui-state-active');\r\n\r\n            inst.minutes = newMinutes;\r\n            this._updateSelectedValue(inst);\r\n\r\n            inst._minutesClicked = true;\r\n            if ((inst._hoursClicked) || (fromDoubleClick) || (showHours == false)) {\r\n                $.timepicker._hideTimepicker();\r\n                // return false because if used inline, prevent the url to change to a hashtag\r\n                return false;\r\n            }\r\n\r\n            // return false because if used inline, prevent the url to change to a hashtag\r\n            return false;\r\n        },\r\n\r\n        _updateSelectedValue: function (inst) {\r\n            var newTime = this._getParsedTime(inst);\r\n            if (inst.input) {\r\n                inst.input.val(newTime);\r\n                inst.input.trigger('change');\r\n            }\r\n            var onSelect = this._get(inst, 'onSelect');\r\n            if (onSelect) { onSelect.apply((inst.input ? inst.input[0] : null), [newTime, inst]); } // trigger custom callback\r\n            this._updateAlternate(inst, newTime);\r\n            return newTime;\r\n        },\r\n\r\n        /* this function process selected time and return it parsed according to instance options */\r\n        _getParsedTime: function(inst) {\r\n\r\n            if (inst.hours == -1 && inst.minutes == -1) {\r\n                return '';\r\n            }\r\n\r\n            // default to 0 AM if hours is not valid\r\n            if ((inst.hours < inst.hours.starts) || (inst.hours > inst.hours.ends )) { inst.hours = 0; }\r\n            // default to 0 minutes if minute is not valid\r\n            if ((inst.minutes < inst.minutes.starts) || (inst.minutes > inst.minutes.ends)) { inst.minutes = 0; }\r\n\r\n            var period = \"\",\r\n                showPeriod = (this._get(inst, 'showPeriod') == true),\r\n                showLeadingZero = (this._get(inst, 'showLeadingZero') == true),\r\n                showHours = (this._get(inst, 'showHours') == true),\r\n                showMinutes = (this._get(inst, 'showMinutes') == true),\r\n                optionalMinutes = (this._get(inst, 'optionalMinutes') == true),\r\n                amPmText = this._get(inst, 'amPmText'),\r\n                selectedHours = inst.hours ? inst.hours : 0,\r\n                selectedMinutes = inst.minutes ? inst.minutes : 0,\r\n                displayHours = selectedHours ? selectedHours : 0,\r\n                parsedTime = '';\r\n\r\n            // fix some display problem when hours or minutes are not selected yet\r\n            if (displayHours == -1) { displayHours = 0 }\r\n            if (selectedMinutes == -1) { selectedMinutes = 0 }\r\n\r\n            if (showPeriod) {\r\n                if (inst.hours == 0) {\r\n                    displayHours = 12;\r\n                }\r\n                if (inst.hours < 12) {\r\n                    period = amPmText[0];\r\n                }\r\n                else {\r\n                    period = amPmText[1];\r\n                    if (displayHours > 12) {\r\n                        displayHours -= 12;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var h = displayHours.toString();\r\n            if (showLeadingZero && (displayHours < 10)) { h = '0' + h; }\r\n\r\n            var m = selectedMinutes.toString();\r\n            if (selectedMinutes < 10) { m = '0' + m; }\r\n\r\n            if (showHours) {\r\n                parsedTime += h;\r\n            }\r\n            if (showHours && showMinutes && (!optionalMinutes || m != 0)) {\r\n                parsedTime += this._get(inst, 'timeSeparator');\r\n            }\r\n            if (showMinutes && (!optionalMinutes || m != 0)) {\r\n                parsedTime += m;\r\n            }\r\n            if (showHours) {\r\n                if (period.length > 0) { parsedTime += this._get(inst, 'periodSeparator') + period; }\r\n            }\r\n\r\n            return parsedTime;\r\n        },\r\n\r\n        /* Update any alternate field to synchronise with the main field. */\r\n        _updateAlternate: function(inst, newTime) {\r\n            var altField = this._get(inst, 'altField');\r\n            if (altField) { // update alternate field too\r\n                $(altField).each(function(i,e) {\r\n                    $(e).val(newTime);\r\n                });\r\n            }\r\n        },\r\n\r\n        _getTimeAsDateTimepicker: function(input) {\r\n            var inst = this._getInst(input);\r\n            if (inst.hours == -1 && inst.minutes == -1) {\r\n                return '';\r\n            }\r\n\r\n            // default to 0 AM if hours is not valid\r\n            if ((inst.hours < inst.hours.starts) || (inst.hours > inst.hours.ends )) { inst.hours = 0; }\r\n            // default to 0 minutes if minute is not valid\r\n            if ((inst.minutes < inst.minutes.starts) || (inst.minutes > inst.minutes.ends)) { inst.minutes = 0; }\r\n\r\n            return new Date(0, 0, 0, inst.hours, inst.minutes, 0);\r\n        },\r\n        /* This might look unused but it's called by the $.fn.timepicker function with param getTime */\r\n        /* added v 0.2.3 - gitHub issue #5 - Thanks edanuff */\r\n        _getTimeTimepicker : function(input) {\r\n            var inst = this._getInst(input);\r\n            return this._getParsedTime(inst);\r\n        },\r\n        _getHourTimepicker: function(input) {\r\n            var inst = this._getInst(input);\r\n            if ( inst == undefined) { return -1; }\r\n            return inst.hours;\r\n        },\r\n        _getMinuteTimepicker: function(input) {\r\n            var inst= this._getInst(input);\r\n            if ( inst == undefined) { return -1; }\r\n            return inst.minutes;\r\n        }\r\n\r\n    });\r\n\r\n\r\n\r\n    /* Invoke the timepicker functionality.\r\n    @param  options  string - a command, optionally followed by additional parameters or\r\n    Object - settings for attaching new timepicker functionality\r\n    @return  jQuery object */\r\n    $.fn.timepicker = function (options) {\r\n        /* Initialise the time picker. */\r\n        if (!$.timepicker.initialized) {\r\n            $(document).mousedown($.timepicker._checkExternalClick);\r\n            $.timepicker.initialized = true;\r\n        }\r\n\r\n         /* Append timepicker main container to body if not exist. */\r\n        if ($(\"#\"+$.timepicker._mainDivId).length === 0) {\r\n            $('body').append($.timepicker.tpDiv);\r\n        }\r\n\r\n        var otherArgs = Array.prototype.slice.call(arguments, 1);\r\n        if (typeof options == 'string' && (options == 'getTime' || options == 'getTimeAsDate' || options == 'getHour' || options == 'getMinute' ))\r\n            return $.timepicker['_' + options + 'Timepicker'].\r\n\t\t\t    apply($.timepicker, [this[0]].concat(otherArgs));\r\n        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')\r\n            return $.timepicker['_' + options + 'Timepicker'].\r\n                apply($.timepicker, [this[0]].concat(otherArgs));\r\n        return this.each(function () {\r\n            typeof options == 'string' ?\r\n\t\t\t$.timepicker['_' + options + 'Timepicker'].\r\n\t\t\t\tapply($.timepicker, [this].concat(otherArgs)) :\r\n\t\t\t$.timepicker._attachTimepicker(this, options);\r\n        });\r\n    };\r\n\r\n    /* jQuery extend now ignores nulls! */\r\n    function extendRemove(target, props) {\r\n        $.extend(target, props);\r\n        for (var name in props)\r\n            if (props[name] == null || props[name] == undefined)\r\n                target[name] = props[name];\r\n        return target;\r\n    };\r\n\r\n    $.timepicker = new Timepicker(); // singleton instance\r\n    $.timepicker.initialized = false;\r\n    $.timepicker.uuid = new Date().getTime();\r\n    $.timepicker.version = \"0.3.3\";\r\n\r\n    // Workaround for #4055\r\n    // Add another global to avoid noConflict issues with inline event handlers\r\n    window['TP_jQuery_' + tpuuid] = $;\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}